/**
 * edython
 *
 * Copyright 2018 Jérôme LAURENS.
 *
 * License EUPL-1.2
 */

/**
 * @fileoverview stdtypes model. Automatically generated by `bin/helpers/stdtypesbot.py`
 * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
 */
'use strict'

goog.provide('eYo.Model.stdtypes')

goog.require('eYo.Model')

eYo.Model.stdtypes.data = {
  categories: [
    'additional-methods-on-integer-types',
    'additional-methods-on-float',
    'iterator-types',
    'lists',
    'tuples',
    'ranges',
    'text-sequence-type-str',
    'string-methods',
    'bytes-objects',
    'bytearray-objects',
    'bytes-and-bytearray-operations',
    'memory-views',
    'set-types-set-frozenset',
    'mapping-types-dict',
    'context-manager-types',
    'special-attributes'
  ],
  types: [
    'method',
    'classmethod',
    'class',
    'staticmethod',
    'attribute'
  ],
  items: [
    {
      name: 'bit_length',
      class: 'int',
      category: 0,
      type: 0
    },
    {
      name: 'to_bytes',
      class: 'int',
      category: 0,
      type: 0
    },
    {
      name: 'from_bytes',
      class: 'int',
      category: 0,
      type: 1
    },
    {
      name: 'as_integer_ratio',
      class: 'float',
      category: 1,
      type: 0
    },
    {
      name: 'is_integer',
      class: 'float',
      category: 1,
      type: 0
    },
    {
      name: 'hex',
      class: 'float',
      category: 1,
      type: 0
    },
    {
      name: 'fromhex',
      class: 'float',
      category: 1,
      type: 1
    },
    {
      name: '__iter__',
      class: 'container',
      category: 2,
      type: 0
    },
    {
      name: '__iter__',
      class: 'iterator',
      category: 2,
      type: 0
    },
    {
      name: '__next__',
      class: 'iterator',
      category: 2,
      type: 0
    },
    {
      name: 'list',
      category: 3,
      type: 2,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'iterable',
          optional: true
        }
      ]
    },
    {
      name: 'tuple',
      category: 4,
      type: 2,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'iterable',
          optional: true
        }
      ]
    },
    {
      name: 'range',
      category: 5,
      type: 2,
      ary: 3,
      mandatory: 2,
      arguments: [
        {
          name: 'start'
        },
        {
          name: 'stop'
        },
        {
          name: 'step',
          optional: true
        }
      ]
    },
    {
      name: 'str',
      category: 6,
      type: 2
    },
    {
      name: 'capitalize',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'casefold',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'center',
      class: 'str',
      category: 7,
      type: 0,
      ary: 2,
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillchar',
          optional: true
        }
      ]
    },
    {
      name: 'count',
      class: 'str',
      category: 7,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'encode',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'endswith',
      class: 'str',
      category: 7,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'suffix'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'expandtabs',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'find',
      class: 'str',
      category: 7,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'format',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'format_map',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'index',
      class: 'str',
      category: 7,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'isalnum',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'isalpha',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'isdecimal',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'isdigit',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'isidentifier',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'islower',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'isnumeric',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'isprintable',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'isspace',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'istitle',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'isupper',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'join',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'ljust',
      class: 'str',
      category: 7,
      type: 0,
      ary: 2,
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillchar',
          optional: true
        }
      ]
    },
    {
      name: 'lower',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'lstrip',
      class: 'str',
      category: 7,
      type: 0,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    },
    {
      name: 'maketrans',
      class: 'str',
      category: 7,
      type: 3,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'x'
        },
        {
          name: 'y',
          optional: true
        },
        {
          name: 'z',
          optional: true
        }
      ]
    },
    {
      name: 'partition',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'replace',
      class: 'str',
      category: 7,
      type: 0,
      ary: 3,
      mandatory: 2,
      arguments: [
        {
          name: 'old'
        },
        {
          name: 'new'
        },
        {
          name: 'count',
          optional: true
        }
      ]
    },
    {
      name: 'rfind',
      class: 'str',
      category: 7,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'rindex',
      class: 'str',
      category: 7,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'rjust',
      class: 'str',
      category: 7,
      type: 0,
      ary: 2,
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillchar',
          optional: true
        }
      ]
    },
    {
      name: 'rpartition',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'rsplit',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'rstrip',
      class: 'str',
      category: 7,
      type: 0,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    },
    {
      name: 'split',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'splitlines',
      class: 'str',
      category: 7,
      type: 0,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'keepends',
          optional: true
        }
      ]
    },
    {
      name: 'startswith',
      class: 'str',
      category: 7,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'prefix'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'strip',
      class: 'str',
      category: 7,
      type: 0,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    },
    {
      name: 'swapcase',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'title',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'translate',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'upper',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'zfill',
      class: 'str',
      category: 7,
      type: 0
    },
    {
      name: 'bytes',
      category: 8,
      type: 2,
      ary: 3,
      mandatory: 0,
      arguments: [
        {
          name: 'source',
          optional: true
        },
        {
          name: 'encoding',
          optional: true
        },
        {
          name: 'errors',
          optional: true
        }
      ]
    },
    {
      name: 'bytearray',
      category: 9,
      type: 2,
      ary: 3,
      mandatory: 0,
      arguments: [
        {
          name: 'source',
          optional: true
        },
        {
          name: 'encoding',
          optional: true
        },
        {
          name: 'errors',
          optional: true
        }
      ]
    },
    {
      name: 'count',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'decode',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'endswith',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'suffix'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'find',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'index',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'join',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'maketrans',
      class: 'bytes',
      category: 10,
      type: 3
    },
    {
      name: 'partition',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'replace',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 3,
      mandatory: 2,
      arguments: [
        {
          name: 'old'
        },
        {
          name: 'new'
        },
        {
          name: 'count',
          optional: true
        }
      ]
    },
    {
      name: 'rfind',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'rindex',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'rpartition',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'startswith',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 3,
      mandatory: 1,
      arguments: [
        {
          name: 'prefix'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    },
    {
      name: 'translate',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'center',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 2,
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillbyte',
          optional: true
        }
      ]
    },
    {
      name: 'ljust',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 2,
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillbyte',
          optional: true
        }
      ]
    },
    {
      name: 'lstrip',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    },
    {
      name: 'rjust',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 2,
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillbyte',
          optional: true
        }
      ]
    },
    {
      name: 'rsplit',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'rstrip',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    },
    {
      name: 'split',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'strip',
      class: 'bytes',
      category: 10,
      type: 0,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    },
    {
      name: 'capitalize',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'expandtabs',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'isalnum',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'isalpha',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'isdigit',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'islower',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'isspace',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'istitle',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'isupper',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'lower',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'splitlines',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'swapcase',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'title',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'upper',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'zfill',
      class: 'bytes',
      category: 10,
      type: 0
    },
    {
      name: 'memoryview',
      category: 11,
      type: 2
    },
    {
      name: 'set',
      category: 12,
      type: 2,
      ary: 1,
      mandatory: 0,
      arguments: [
        {
          name: 'iterable',
          optional: true
        }
      ]
    },
    {
      name: 'dict',
      category: 13,
      type: 2
    },
    {
      name: '__enter__',
      class: 'contextmanager',
      category: 14,
      type: 0
    },
    {
      name: '__exit__',
      class: 'contextmanager',
      category: 14,
      type: 0
    },
    {
      name: '__dict__',
      category: 15,
      type: 4
    },
    {
      name: '__class__',
      category: 15,
      type: 4
    },
    {
      name: '__bases__',
      category: 15,
      type: 4
    },
    {
      name: '__name__',
      category: 15,
      type: 4
    },
    {
      name: '__qualname__',
      category: 15,
      type: 4
    },
    {
      name: '__mro__',
      category: 15,
      type: 4
    },
    {
      name: 'mro',
      class: 'class',
      category: 15,
      type: 0
    },
    {
      name: '__subclasses__',
      class: 'class',
      category: 15,
      type: 0
    }
  ],
  by_name: {
    'find': 63,
    'isspace': 88,
    '__name__': 105,
    'capitalize': 82,
    'center': 74,
    '__iter__': 8,
    'to_bytes': 1,
    'upper': 95,
    'isdecimal': 27,
    'lower': 91,
    'bytes': 58,
    'startswith': 72,
    '__class__': 103,
    'translate': 73,
    'rpartition': 71,
    'str': 13,
    'rindex': 70,
    'rjust': 77,
    'format': 22,
    'dict': 99,
    'set': 98,
    'ljust': 75,
    'tuple': 11,
    'memoryview': 97,
    'rsplit': 78,
    'split': 80,
    'mro': 108,
    'bit_length': 0,
    'maketrans': 66,
    'fromhex': 6,
    '__qualname__': 106,
    '__exit__': 101,
    'join': 65,
    '__bases__': 104,
    'casefold': 15,
    '__mro__': 107,
    'range': 12,
    'strip': 81,
    'encode': 18,
    'splitlines': 92,
    'rstrip': 79,
    'as_integer_ratio': 3,
    'is_integer': 4,
    'title': 94,
    'isupper': 90,
    'bytearray': 59,
    'expandtabs': 83,
    '__next__': 9,
    'count': 60,
    'swapcase': 93,
    '__enter__': 100,
    'isidentifier': 29,
    'from_bytes': 2,
    'rfind': 69,
    'endswith': 62,
    'partition': 67,
    'istitle': 89,
    'hex': 5,
    '__subclasses__': 109,
    'format_map': 23,
    'zfill': 96,
    'replace': 68,
    'lstrip': 76,
    'isalnum': 84,
    'isnumeric': 31,
    'list': 10,
    'index': 64,
    'isalpha': 85,
    'decode': 61,
    '__dict__': 102,
    'isdigit': 86,
    'isprintable': 32,
    'islower': 87
  },
  by_category: {
    5: [12],
    12: [98],
    9: [59],
    4: [11],
    0: [0, 1, 2],
    14: [100, 101],
    6: [13],
    7: [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57],
    1: [3, 4, 5, 6],
    15: [102, 103, 104, 105, 106, 107, 108, 109],
    8: [58],
    11: [97],
    13: [99],
    10: [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96],
    3: [10],
    2: [7, 8, 9]
  },
  by_type: {
    2: [10, 11, 12, 13, 58, 59, 97, 98, 99],
    3: [40, 66],
    4: [102, 103, 104, 105, 106, 107],
    0: [0, 1, 3, 4, 5, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 108, 109],
    1: [2, 6]
  }
}

/**
 * Get the item with the given key
 * @param {!String|Number} key  The key or index of the item
 * @return {?Object} return the model object for that item, if any.
 */
eYo.Model.stdtypes.getItem = function (key) {
  if (!goog.isNumber(key)) {
    key = eYo.Model.stdtypes.data.by_name[key]
  }
  if (goog.isNumber(key)) {
    return eYo.Model.stdtypes.data.items[key]
  }
}

/**
 * Get the indices of the items for the given category
 * @param {!String} key  The name of the category
 * @return {!Array} the list of item indices with the given category (possibly void).
 */
eYo.Model.stdtypes.getItemsInCategory = function (category, type) {
  var ra = eYo.Model.stdtypes.data.by_category[category] || []
  if (goog.isString(type)) {
    type = eYo.Model.stdtypes.data.type.indexOf(type)
  }
  if (goog.isNumber(type) && type >= 0) {
    var ra2 = []
    for (var i = 0; i < ra.length ; i++ ) {
      var item = eYo.Model.stdtypes.getItem(i)
      if (item && item.type === type) {
        ra2.append(i)
      }
    }
    return ra2
  } else {
    return ra
  }
}

// This file was generated by `./bin/helpers/stdtypesbot.py` on 2018-07-15 11:13:34.575426


