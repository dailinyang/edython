/**
 * edython
 *
 * Copyright 2018 Jérôme LAURENS.
 *
 * License EUPL-1.2
 */

/**
 * @fileoverview stdtypes model. Automatically generated by `python3 bin/helpers/modulebot.py --no-suffix stdtypes`
 * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
 */
'use strict'

goog.provide('eYo.Model.stdtypes')
goog.provide('eYo.Model.stdtypes.Item')

goog.require('eYo.Model')
goog.require('eYo.Model.Item')
goog.require('eYo.Protocol.Item')

/**
 * @constructor
 * @param {*} model 
 */
eYo.Model.stdtypes.Item = function (model) {
  eYo.Model.stdtypes.Item.superClass_.constructor.call(this, model)
}

var Item = eYo.Model.stdtypes.Item

goog.inherits(Item, eYo.Model.Item)

/**
 * model
 */
Item.prototype.model = eYo.Model.stdtypes

Item.prototype.model.url = 'https://docs.python.org/3.6/library/stdtypes.html'

Object.defineProperties(
  Item.prototype,
  {
    url: {
      get() {
        return this.href
          ? this.model.url + this.href
          : this.model.url
      }
    }
  }
)

eYo.Model.stdtypes.data = {
  categories: [
    'additional-methods-on-integer-types',
    'additional-methods-on-float',
    'iterator-types',
    'lists',
    'tuples',
    'ranges',
    'text-sequence-type-str',
    'string-methods',
    'bytes-objects',
    'bytearray-objects',
    'bytes-and-bytearray-operations',
    'memory-views',
    'set-types-set-frozenset',
    'mapping-types-dict',
    'dictionary-view-objects',
    'context-manager-types',
    'special-attributes'
  ],
  types: [
    'method',
    'classmethod',
    'class',
    'attribute',
    'staticmethod',
    'None'
  ],
  items: [
    new Item({
      name: 'bit_length',
      class: 'int',
      category: 0,
      type_: 0,
      href: '#int.bit_length'
    }),
    new Item({
      name: 'to_bytes',
      class: 'int',
      category: 0,
      type_: 0,
      href: '#int.to_bytes',
      mandatory: 3,
      arguments: [
        {
          name: 'length'
        },
        {
          name: 'byteorder'
        },
        {
          name: '*'
        },
        {
          name: 'signed',
          default: 'False'
        }
      ]
    }),
    new Item({
      name: 'from_bytes',
      class: 'int',
      category: 0,
      type_: 1,
      href: '#int.from_bytes',
      mandatory: 3,
      arguments: [
        {
          name: 'bytes'
        },
        {
          name: 'byteorder'
        },
        {
          name: '*'
        },
        {
          name: 'signed',
          default: 'False'
        }
      ]
    }),
    new Item({
      name: 'as_integer_ratio',
      class: 'float',
      category: 1,
      type_: 0,
      href: '#float.as_integer_ratio'
    }),
    new Item({
      name: 'is_integer',
      class: 'float',
      category: 1,
      type_: 0,
      href: '#float.is_integer'
    }),
    new Item({
      name: 'hex',
      class: 'float',
      category: 1,
      type_: 0,
      href: '#float.hex'
    }),
    new Item({
      name: 'fromhex',
      class: 'float',
      category: 1,
      type_: 1,
      href: '#float.fromhex',
      arguments: [
        {
          name: 's'
        }
      ]
    }),
    new Item({
      name: '__iter__',
      class: 'container',
      category: 2,
      type_: 0,
      href: '#container.__iter__'
    }),
    new Item({
      name: '__iter__',
      class: 'iterator',
      category: 2,
      type_: 0,
      href: '#iterator.__iter__'
    }),
    new Item({
      name: '__next__',
      class: 'iterator',
      category: 2,
      type_: 0,
      href: '#iterator.__next__'
    }),
    new Item({
      name: 'list',
      class: '',
      category: 3,
      type_: 2,
      href: '#list',
      mandatory: 0,
      arguments: [
        {
          name: 'iterable',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'sort',
      class: 'list',
      category: 3,
      type_: 0,
      href: '#list.sort',
      stmt: true,
      mandatory: 1,
      arguments: [
        {
          name: '*'
        },
        {
          name: 'key',
          default: 'None'
        },
        {
          name: 'reverse',
          default: 'False'
        }
      ]
    }),
    new Item({
      name: 'tuple',
      class: '',
      category: 4,
      type_: 2,
      href: '#tuple',
      mandatory: 0,
      arguments: [
        {
          name: 'iterable',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'range',
      class: '',
      category: 5,
      type_: 2,
      href: '#range',
      mandatory: 2,
      arguments: [
        {
          name: 'start'
        },
        {
          name: 'stop'
        },
        {
          name: 'step',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'start',
      class: 'range',
      category: 5,
      type_: 3
    }),
    new Item({
      name: 'stop',
      class: 'range',
      category: 5,
      type_: 3
    }),
    new Item({
      name: 'step',
      class: 'range',
      category: 5,
      type_: 3
    }),
    new Item({
      name: 'str',
      class: '',
      category: 6,
      type_: 2,
      href: '#str',
      mandatory: 0,
      arguments: [
        {
          name: 'object',
          default: 'b\'\''
        },
        {
          name: 'encoding',
          default: '\'utf-8\''
        },
        {
          name: 'errors',
          default: '\'strict\''
        }
      ]
    }),
    new Item({
      name: 'capitalize',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.capitalize'
    }),
    new Item({
      name: 'casefold',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.casefold'
    }),
    new Item({
      name: 'center',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.center',
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillchar',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'count',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.count',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'encode',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.encode',
      mandatory: 0,
      arguments: [
        {
          name: 'encoding',
          default: '"utf-8"'
        },
        {
          name: 'errors',
          default: '"strict"'
        }
      ]
    }),
    new Item({
      name: 'endswith',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.endswith',
      mandatory: 1,
      arguments: [
        {
          name: 'suffix'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'expandtabs',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.expandtabs',
      mandatory: 0,
      arguments: [
        {
          name: 'tabsize',
          default: 8
        }
      ]
    }),
    new Item({
      name: 'find',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.find',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'format',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.format',
      mandatory: 2,
      arguments: [
        {
          name: '*args'
        },
        {
          name: '**kwargs'
        }
      ]
    }),
    new Item({
      name: 'format_map',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.format_map',
      arguments: [
        {
          name: 'mapping'
        }
      ]
    }),
    new Item({
      name: 'index',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.index',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'isalnum',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isalnum'
    }),
    new Item({
      name: 'isalpha',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isalpha'
    }),
    new Item({
      name: 'isdecimal',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isdecimal'
    }),
    new Item({
      name: 'isdigit',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isdigit'
    }),
    new Item({
      name: 'isidentifier',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isidentifier'
    }),
    new Item({
      name: 'islower',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.islower'
    }),
    new Item({
      name: 'isnumeric',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isnumeric'
    }),
    new Item({
      name: 'isprintable',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isprintable'
    }),
    new Item({
      name: 'isspace',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isspace'
    }),
    new Item({
      name: 'istitle',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.istitle'
    }),
    new Item({
      name: 'isupper',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.isupper'
    }),
    new Item({
      name: 'join',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.join',
      arguments: [
        {
          name: 'iterable'
        }
      ]
    }),
    new Item({
      name: 'ljust',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.ljust',
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillchar',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'lower',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.lower'
    }),
    new Item({
      name: 'lstrip',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.lstrip',
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'maketrans',
      class: 'str',
      category: 7,
      type_: 4,
      href: '#str.maketrans',
      mandatory: 1,
      arguments: [
        {
          name: 'x'
        },
        {
          name: 'y',
          optional: true
        },
        {
          name: 'z',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'partition',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.partition',
      arguments: [
        {
          name: 'sep'
        }
      ]
    }),
    new Item({
      name: 'replace',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.replace',
      mandatory: 2,
      arguments: [
        {
          name: 'old'
        },
        {
          name: 'new'
        },
        {
          name: 'count',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rfind',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.rfind',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rindex',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.rindex',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rjust',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.rjust',
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillchar',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rpartition',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.rpartition',
      arguments: [
        {
          name: 'sep'
        }
      ]
    }),
    new Item({
      name: 'rsplit',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.rsplit',
      mandatory: 0,
      arguments: [
        {
          name: 'sep',
          default: 'None'
        },
        {
          name: 'maxsplit',
          default: -1
        }
      ]
    }),
    new Item({
      name: 'rstrip',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.rstrip',
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'split',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.split',
      mandatory: 0,
      arguments: [
        {
          name: 'sep',
          default: 'None'
        },
        {
          name: 'maxsplit',
          default: -1
        }
      ]
    }),
    new Item({
      name: 'splitlines',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.splitlines',
      mandatory: 0,
      arguments: [
        {
          name: 'keepends',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'startswith',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.startswith',
      mandatory: 1,
      arguments: [
        {
          name: 'prefix'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'strip',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.strip',
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'swapcase',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.swapcase'
    }),
    new Item({
      name: 'title',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.title'
    }),
    new Item({
      name: 'translate',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.translate',
      arguments: [
        {
          name: 'table'
        }
      ]
    }),
    new Item({
      name: 'upper',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.upper'
    }),
    new Item({
      name: 'zfill',
      class: 'str',
      category: 7,
      type_: 0,
      href: '#str.zfill',
      arguments: [
        {
          name: 'width'
        }
      ]
    }),
    new Item({
      name: 'bytes',
      class: '',
      category: 8,
      type_: 2,
      href: '#bytes',
      stmt: true,
      mandatory: 0,
      arguments: [
        {
          name: 'source',
          optional: true
        },
        {
          name: 'encoding',
          optional: true
        },
        {
          name: 'errors',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'fromhex',
      class: 'bytes',
      category: 8,
      type_: 1,
      href: '#bytes.fromhex',
      arguments: [
        {
          name: 'string'
        }
      ]
    }),
    new Item({
      name: 'hex',
      class: 'bytes',
      category: 8,
      type_: 0,
      href: '#bytes.hex'
    }),
    new Item({
      name: 'bytearray',
      class: '',
      category: 9,
      type_: 2,
      href: '#bytearray',
      stmt: true,
      mandatory: 0,
      arguments: [
        {
          name: 'source',
          optional: true
        },
        {
          name: 'encoding',
          optional: true
        },
        {
          name: 'errors',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'fromhex',
      class: 'bytearray',
      category: 9,
      type_: 1,
      href: '#bytearray.fromhex',
      arguments: [
        {
          name: 'string'
        }
      ]
    }),
    new Item({
      name: 'hex',
      class: 'bytearray',
      category: 9,
      type_: 0,
      href: '#bytearray.hex'
    }),
    new Item({
      name: 'count',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.count',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'decode',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.decode',
      mandatory: 0,
      arguments: [
        {
          name: 'encoding',
          default: '"utf-8"'
        },
        {
          name: 'errors',
          default: '"strict"'
        }
      ]
    }),
    new Item({
      name: 'endswith',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.endswith',
      mandatory: 1,
      arguments: [
        {
          name: 'suffix'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'find',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.find',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'index',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.index',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'join',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.join',
      arguments: [
        {
          name: 'iterable'
        }
      ]
    }),
    new Item({
      name: 'maketrans',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 4,
      href: '#bytearray.maketrans',
      arguments: [
        {
          name: 'from'
        },
        {
          name: 'to'
        }
      ]
    }),
    new Item({
      name: 'partition',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.partition',
      arguments: [
        {
          name: 'sep'
        }
      ]
    }),
    new Item({
      name: 'replace',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.replace',
      mandatory: 2,
      arguments: [
        {
          name: 'old'
        },
        {
          name: 'new'
        },
        {
          name: 'count',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rfind',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.rfind',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rindex',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.rindex',
      mandatory: 1,
      arguments: [
        {
          name: 'sub'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rpartition',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.rpartition',
      arguments: [
        {
          name: 'sep'
        }
      ]
    }),
    new Item({
      name: 'startswith',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.startswith',
      mandatory: 1,
      arguments: [
        {
          name: 'prefix'
        },
        {
          name: 'start',
          optional: true
        },
        {
          name: 'end',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'translate',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.translate',
      mandatory: 1,
      arguments: [
        {
          name: 'table'
        },
        {
          name: 'delete',
          default: 'b\'\''
        }
      ]
    }),
    new Item({
      name: 'center',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.center',
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillbyte',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'ljust',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.ljust',
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillbyte',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'lstrip',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.lstrip',
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rjust',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.rjust',
      mandatory: 1,
      arguments: [
        {
          name: 'width'
        },
        {
          name: 'fillbyte',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'rsplit',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.rsplit',
      mandatory: 0,
      arguments: [
        {
          name: 'sep',
          default: 'None'
        },
        {
          name: 'maxsplit',
          default: -1
        }
      ]
    }),
    new Item({
      name: 'rstrip',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.rstrip',
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'split',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.split',
      mandatory: 0,
      arguments: [
        {
          name: 'sep',
          default: 'None'
        },
        {
          name: 'maxsplit',
          default: -1
        }
      ]
    }),
    new Item({
      name: 'strip',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.strip',
      mandatory: 0,
      arguments: [
        {
          name: 'chars',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'capitalize',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.capitalize'
    }),
    new Item({
      name: 'expandtabs',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.expandtabs',
      mandatory: 0,
      arguments: [
        {
          name: 'tabsize',
          default: 8
        }
      ]
    }),
    new Item({
      name: 'isalnum',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.isalnum'
    }),
    new Item({
      name: 'isalpha',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.isalpha'
    }),
    new Item({
      name: 'isdigit',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.isdigit'
    }),
    new Item({
      name: 'islower',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.islower'
    }),
    new Item({
      name: 'isspace',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.isspace'
    }),
    new Item({
      name: 'istitle',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.istitle'
    }),
    new Item({
      name: 'isupper',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.isupper'
    }),
    new Item({
      name: 'lower',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.lower'
    }),
    new Item({
      name: 'splitlines',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.splitlines',
      mandatory: 0,
      arguments: [
        {
          name: 'keepends',
          default: 'False'
        }
      ]
    }),
    new Item({
      name: 'swapcase',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.swapcase'
    }),
    new Item({
      name: 'title',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.title'
    }),
    new Item({
      name: 'upper',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.upper'
    }),
    new Item({
      name: 'zfill',
      class: 'bytearray',
      holder: 'bytes',
      category: 10,
      type_: 0,
      href: '#bytearray.zfill',
      arguments: [
        {
          name: 'width'
        }
      ]
    }),
    new Item({
      name: 'memoryview',
      class: '',
      category: 11,
      type_: 2,
      href: '#memoryview',
      stmt: true,
      arguments: [
        {
          name: 'obj'
        }
      ]
    }),
    new Item({
      name: '__eq__',
      class: 'memoryview',
      category: 11,
      type_: 0,
      href: '#memoryview.__eq__',
      arguments: [
        {
          name: 'exporter'
        }
      ]
    }),
    new Item({
      name: 'tobytes',
      class: 'memoryview',
      category: 11,
      type_: 0,
      href: '#memoryview.tobytes'
    }),
    new Item({
      name: 'hex',
      class: 'memoryview',
      category: 11,
      type_: 0,
      href: '#memoryview.hex'
    }),
    new Item({
      name: 'tolist',
      class: 'memoryview',
      category: 11,
      type_: 0,
      href: '#memoryview.tolist'
    }),
    new Item({
      name: 'release',
      class: 'memoryview',
      category: 11,
      type_: 0,
      href: '#memoryview.release',
      stmt: true
    }),
    new Item({
      name: 'cast',
      class: 'memoryview',
      category: 11,
      type_: 0,
      href: '#memoryview.cast',
      stmt: true,
      mandatory: 1,
      arguments: [
        {
          name: 'format'
        },
        {
          name: 'shape',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'obj',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'nbytes',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'readonly',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'format',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'itemsize',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'ndim',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'shape',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'strides',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'suboffsets',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'c_contiguous',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'f_contiguous',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'contiguous',
      class: 'memoryview',
      category: 11,
      type_: 3
    }),
    new Item({
      name: 'set',
      class: '',
      category: 12,
      type_: 2,
      href: '#frozenset',
      mandatory: 0,
      arguments: [
        {
          name: 'iterable',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'len',
      category: 12,
      type_: 5,
      arguments: [
        {
          name: 's'
        }
      ]
    }),
    new Item({
      name: 'isdisjoint',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.isdisjoint',
      arguments: [
        {
          name: 'other'
        }
      ]
    }),
    new Item({
      name: 'issubset',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.issubset',
      stmt: true,
      arguments: [
        {
          name: 'other'
        }
      ]
    }),
    new Item({
      name: 'issuperset',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.issuperset',
      stmt: true,
      arguments: [
        {
          name: 'other'
        }
      ]
    }),
    new Item({
      name: 'union',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.union',
      mandatory: 1,
      arguments: [
        {
          name: '*others'
        }
      ]
    }),
    new Item({
      name: 'intersection',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.intersection',
      mandatory: 1,
      arguments: [
        {
          name: '*others'
        }
      ]
    }),
    new Item({
      name: 'difference',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.difference',
      mandatory: 1,
      arguments: [
        {
          name: '*others'
        }
      ]
    }),
    new Item({
      name: 'symmetric_difference',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.symmetric_difference',
      arguments: [
        {
          name: 'other'
        }
      ]
    }),
    new Item({
      name: 'copy',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.copy'
    }),
    new Item({
      name: 'update',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.update',
      stmt: true,
      mandatory: 1,
      arguments: [
        {
          name: '*others'
        }
      ]
    }),
    new Item({
      name: 'intersection_update',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.intersection_update',
      stmt: true,
      mandatory: 1,
      arguments: [
        {
          name: '*others'
        }
      ]
    }),
    new Item({
      name: 'difference_update',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.difference_update',
      stmt: true,
      mandatory: 1,
      arguments: [
        {
          name: '*others'
        }
      ]
    }),
    new Item({
      name: 'symmetric_difference_update',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.symmetric_difference_update',
      stmt: true,
      arguments: [
        {
          name: 'other'
        }
      ]
    }),
    new Item({
      name: 'add',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.add',
      stmt: true,
      arguments: [
        {
          name: 'elem'
        }
      ]
    }),
    new Item({
      name: 'remove',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.remove',
      stmt: true,
      arguments: [
        {
          name: 'elem'
        }
      ]
    }),
    new Item({
      name: 'discard',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.discard',
      stmt: true,
      arguments: [
        {
          name: 'elem'
        }
      ]
    }),
    new Item({
      name: 'pop',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.pop'
    }),
    new Item({
      name: 'clear',
      class: 'frozenset',
      category: 12,
      type_: 0,
      href: '#frozenset.clear',
      stmt: true
    }),
    new Item({
      name: 'dict',
      class: '',
      category: 13,
      type_: 2,
      href: '#dict',
      mandatory: 2,
      arguments: [
        {
          name: 'mapping'
        },
        {
          name: '**kwarg'
        }
      ]
    }),
    new Item({
      name: 'len',
      category: 13,
      type_: 5,
      arguments: [
        {
          name: 'd'
        }
      ]
    }),
    new Item({
      name: 'iter',
      category: 13,
      type_: 5,
      arguments: [
        {
          name: 'd'
        }
      ]
    }),
    new Item({
      name: 'clear',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.clear',
      stmt: true
    }),
    new Item({
      name: 'copy',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.copy'
    }),
    new Item({
      name: 'fromkeys',
      class: 'dict',
      category: 13,
      type_: 1,
      href: '#dict.fromkeys',
      stmt: true,
      mandatory: 1,
      arguments: [
        {
          name: 'seq'
        },
        {
          name: 'value',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'get',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.get',
      mandatory: 1,
      arguments: [
        {
          name: 'key'
        },
        {
          name: 'default',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'items',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.items'
    }),
    new Item({
      name: 'keys',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.keys'
    }),
    new Item({
      name: 'pop',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.pop',
      mandatory: 1,
      arguments: [
        {
          name: 'key'
        },
        {
          name: 'default',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'popitem',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.popitem'
    }),
    new Item({
      name: 'setdefault',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.setdefault',
      mandatory: 1,
      arguments: [
        {
          name: 'key'
        },
        {
          name: 'default',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'update',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.update',
      mandatory: 0,
      arguments: [
        {
          name: 'other',
          optional: true
        }
      ]
    }),
    new Item({
      name: 'values',
      class: 'dict',
      category: 13,
      type_: 0,
      href: '#dict.values'
    }),
    new Item({
      name: 'len',
      category: 14,
      type_: 5,
      arguments: [
        {
          name: 'dictview'
        }
      ]
    }),
    new Item({
      name: 'iter',
      category: 14,
      type_: 5,
      arguments: [
        {
          name: 'dictview'
        }
      ]
    }),
    new Item({
      name: '__enter__',
      class: 'contextmanager',
      category: 15,
      type_: 0,
      href: '#contextmanager.__enter__'
    }),
    new Item({
      name: '__exit__',
      class: 'contextmanager',
      category: 15,
      type_: 0,
      href: '#contextmanager.__exit__',
      arguments: [
        {
          name: 'exc_type'
        },
        {
          name: 'exc_val'
        },
        {
          name: 'exc_tb'
        }
      ]
    }),
    new Item({
      name: '__dict__',
      class: 'object',
      category: 16,
      type_: 3
    }),
    new Item({
      name: '__class__',
      class: 'instance',
      category: 16,
      type_: 3
    }),
    new Item({
      name: '__bases__',
      class: 'class',
      category: 16,
      type_: 3
    }),
    new Item({
      name: '__name__',
      class: 'definition',
      category: 16,
      type_: 3
    }),
    new Item({
      name: '__qualname__',
      class: 'definition',
      category: 16,
      type_: 3
    }),
    new Item({
      name: '__mro__',
      class: 'class',
      category: 16,
      type_: 3
    }),
    new Item({
      name: 'mro',
      class: 'class',
      category: 16,
      type_: 0,
      href: '#class.mro'
    }),
    new Item({
      name: '__subclasses__',
      class: 'class',
      category: 16,
      type_: 0,
      href: '#class.__subclasses__'
    })
  ],
  by_name: {
    'bit_length': 0,
    'to_bytes': 1,
    'from_bytes': 2,
    'as_integer_ratio': 3,
    'is_integer': 4,
    'hex': 108,
    'fromhex': 66,
    '__iter__': 8,
    '__next__': 9,
    'list': 10,
    'sort': 11,
    'tuple': 12,
    'range': 13,
    'start': 14,
    'stop': 15,
    'step': 16,
    'str': 17,
    'capitalize': 90,
    'casefold': 19,
    'center': 82,
    'count': 68,
    'encode': 22,
    'endswith': 70,
    'expandtabs': 91,
    'find': 71,
    'format': 115,
    'format_map': 27,
    'index': 72,
    'isalnum': 92,
    'isalpha': 93,
    'isdecimal': 31,
    'isdigit': 94,
    'isidentifier': 33,
    'islower': 95,
    'isnumeric': 35,
    'isprintable': 36,
    'isspace': 96,
    'istitle': 97,
    'isupper': 98,
    'join': 73,
    'ljust': 83,
    'lower': 99,
    'lstrip': 84,
    'maketrans': 74,
    'partition': 75,
    'replace': 76,
    'rfind': 77,
    'rindex': 78,
    'rjust': 85,
    'rpartition': 79,
    'rsplit': 86,
    'rstrip': 87,
    'split': 88,
    'splitlines': 100,
    'startswith': 80,
    'strip': 89,
    'swapcase': 101,
    'title': 102,
    'translate': 81,
    'upper': 103,
    'zfill': 104,
    'bytes': 62,
    'bytearray': 65,
    'decode': 69,
    'memoryview': 105,
    '__eq__': 106,
    'tobytes': 107,
    'tolist': 109,
    'release': 110,
    'cast': 111,
    'obj': 112,
    'nbytes': 113,
    'readonly': 114,
    'itemsize': 116,
    'ndim': 117,
    'shape': 118,
    'strides': 119,
    'suboffsets': 120,
    'c_contiguous': 121,
    'f_contiguous': 122,
    'contiguous': 123,
    'set': 124,
    'len': 157,
    'isdisjoint': 126,
    'issubset': 127,
    'issuperset': 128,
    'union': 129,
    'intersection': 130,
    'difference': 131,
    'symmetric_difference': 132,
    'copy': 147,
    'update': 155,
    'intersection_update': 135,
    'difference_update': 136,
    'symmetric_difference_update': 137,
    'add': 138,
    'remove': 139,
    'discard': 140,
    'pop': 152,
    'clear': 146,
    'dict': 143,
    'iter': 158,
    'fromkeys': 148,
    'get': 149,
    'items': 150,
    'keys': 151,
    'popitem': 153,
    'setdefault': 154,
    'values': 156,
    '__enter__': 159,
    '__exit__': 160,
    '__dict__': 161,
    '__class__': 162,
    '__bases__': 163,
    '__name__': 164,
    '__qualname__': 165,
    '__mro__': 166,
    'mro': 167,
    '__subclasses__': 168
  },
  by_category: {
    0: [0, 1, 2],
    1: [3, 4, 5, 6],
    2: [7, 8, 9],
    3: [10, 11],
    4: [12],
    5: [13, 14, 15, 16],
    6: [17],
    7: [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61],
    8: [62, 63, 64],
    9: [65, 66, 67],
    10: [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104],
    11: [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123],
    12: [124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142],
    13: [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156],
    14: [157, 158],
    15: [159, 160],
    16: [161, 162, 163, 164, 165, 166, 167, 168]
  },
  by_type: {
    0: [0, 1, 3, 4, 5, 7, 8, 9, 11, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 167, 168],
    1: [2, 6, 63, 66, 148],
    2: [10, 12, 13, 17, 62, 65, 105, 124, 143],
    3: [14, 15, 16, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 161, 162, 163, 164, 165, 166],
    4: [44, 74],
    5: [125, 144, 145, 157, 158]
  }
}

// Add the `Item` methods.
eYo.Do.addProtocol(eYo.Model.stdtypes, 'Item', eYo.Model.stdtypes)

// register the types
eYo.Model.Item.registerTypes(eYo.Model.stdtypes.data.types)


// This file was generated by `python3 ./bin/helpers/modulebot.py --no-suffix stdtypes` on 2018-11-10 11:13:46.381787


