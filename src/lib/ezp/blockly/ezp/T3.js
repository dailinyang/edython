// This file was generated by "python types.py" on 2018-02-10 06:58:04.416139

/**
 * ezPython
 *
 * Copyright 2017 Jérôme LAURENS.
 *
 * License CeCILL-B
 */
/**
 * @fileoverview Type constants for ezPython, used as blocks prototypes.
 * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
 */
'use strict'

/**
         * @name ezP.T3
 * @namespace
 **/

goog.provide('ezP.T3')
goog.provide('ezP.T3.Expr')
goog.provide('ezP.T3.Stmt')

goog.require('ezP')


ezP.T3 = {}

ezP.T3.Stmt = {
// part statements
  import_part               /*   ::= import_expr                                        */ : "ezp_import_part",
  if_part                   /*   ::= "if" expression ":"                                */ : "ezp_if_part",
  elif_part                 /*   ::= "elif" expression ":"                              */ : "ezp_elif_part",
  else_part                 /*   ::= "else" ":"                                         */ : "ezp_else_part",
  while_part                /*   ::= "while" expression ":"                             */ : "ezp_while_part",
  for_part                  /*   ::= "for" target_list "in" expression_list ":"         */ : "ezp_for_part",
  try_part                  /*   ::= "try" ":"                                          */ : "ezp_try_part",
  except_part               /*   ::= "except" expression ["as" identifier] ":"          */ : "ezp_except_part",
  void_except_part          /*   ::= "except" ":"                                       */ : "ezp_void_except_part",
  finally_part              /*   ::= "finally" ":"                                      */ : "ezp_finally_part",
  with_part                 /*   ::= "with" with_item_list ":"                          */ : "ezp_with_part",
  funcdef_part              /*   ::= "def" funcname "(" [parameter_list] ")" ["->" expression] ":" */ : "ezp_funcdef_part",
  decorator_part            /*   ::= "@" dotted_funcname [parenth_argument_list]        */ : "ezp_decorator_part",
  classdef_part             /*   ::= "class" classname [parenth_argument_list] ":"      */ : "ezp_classdef_part",
// other simple statements
  simple_stmt               /*   ::= expression_stmt | assert_stmt | assignment_stmt | augmented_assignment_stmt | annotated_assignment_stmt | pass_stmt | del_stmt | return_stmt | yield_stmt | raise_stmt | break_stmt | continue_stmt | import_stmt | global_stmt | nonlocal_stmt */ : "ezp_simple_stmt",
  expression_stmt           /*   ::= starred_expression                                 */ : "ezp_expression_stmt",
  assignment_stmt           /*   ::= assignment_expression                              */ : "ezp_assignment_stmt",
  augmented_assignment_stmt /*   ::= augmented_assignment_expression                    */ : "ezp_augmented_assignment_stmt",
  annotated_assignment_stmt /*   ::= augtarget ":" expression ["=" expression]          */ : "ezp_annotated_assignment_stmt",
  assert_stmt               /*   ::= "assert" expression ["," expression]               */ : "ezp_assert_stmt",
  pass_stmt                 /*   ::= "pass"                                             */ : "ezp_pass_stmt",
  del_stmt                  /*   ::= "del" target_list                                  */ : "ezp_del_stmt",
  return_stmt               /*   ::= "return" [expression_list]                         */ : "ezp_return_stmt",
  yield_stmt                /*   ::= yield_expression                                   */ : "ezp_yield_stmt",
  raise_stmt                /*   ::= "raise" [expression ["from" expression]]           */ : "ezp_raise_stmt",
  break_stmt                /*   ::= "break"                                            */ : "ezp_break_stmt",
  continue_stmt             /*   ::= "continue"                                         */ : "ezp_continue_stmt",
  import_stmt               /*   ::= "import" module ["as" name] ( "," module ["as" name] )* | "from" relative_module "import" identifier ["as" name] ( "," identifier ["as" name] )* | "from" relative_module "import" "(" identifier ["as" name] ( "," identifier ["as" name] )* [","] ")" | "from" module "import" "*" */ : "ezp_import_stmt",
  future_statement          /*   ::= "from" "__future__" "import" feature ["as" name] ("," feature ["as" name])* | "from" "__future__" "import" "(" feature ["as" name] ("," feature ["as" name])* [","] ")" */ : "ezp_future_statement",
  global_stmt               /*   ::= "global" identifier_list                           */ : "ezp_global_stmt",
  nonlocal_stmt             /*   ::= "nonlocal" identifier_list                         */ : "ezp_nonlocal_stmt",
  main_stmt                 /*   ::= green flag statement                               */ : "ezp_main_stmt",
  docstring_top_stmt        /*   ::= triple quoted long string at the top of the module */ : "ezp_docstring_top_stmt",
  global_or_nonlocal_stmt   /*   ::= global_stmt | nonlocal_stmt                        */ : "ezp_global_or_nonlocal_stmt",
  decorators                /*   ::= decorator+                                         */ : "ezp_decorators",
  docstring_def_stmt        /*   ::= triple quoted long string at the top of the function or class */ : "ezp_docstring_def_stmt",
// compound statements
  compound_stmt             /*   ::= if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | async_with_stmt | async_for_stmt | async_funcdef */ : "ezp_compound_stmt",
  if_stmt                   /*   ::= "if" expression ":" suite ( "elif" expression ":" suite )* ["else" ":" suite] */ : "ezp_if_stmt",
  while_stmt                /*   ::= "while" expression ":" suite ["else" ":" suite]    */ : "ezp_while_stmt",
  for_stmt                  /*   ::= "for" target_list "in" expression_list ":" suite ["else" ":" suite] */ : "ezp_for_stmt",
  try_stmt                  /*   ::= try1_stmt | try2_stmt                              */ : "ezp_try_stmt",
  try1_stmt                 /*   ::= "try" ":" suite ("except" [expression ["as" identifier]] ":" suite)+ ["else" ":" suite] ["finally" ":" suite] */ : "ezp_try1_stmt",
  try2_stmt                 /*   ::= "try" ":" suite "finally" ":" suite                */ : "ezp_try2_stmt",
  with_stmt                 /*   ::= "with" with_item ("," with_item)* ":" suite        */ : "ezp_with_stmt",
  classdef                  /*   ::= [decorators] "class" classname [inheritance] ":" suite */ : "ezp_classdef",
  async_funcdef             /*   ::= [decorators] "async" "def" funcname "(" [parameter_list] ")" ["->" expression] ":" suite */ : "ezp_async_funcdef",
  async_for_stmt            /*   ::= "async" for_stmt                                   */ : "ezp_async_for_stmt",
  async_with_stmt           /*   ::= "async" with_stmt                                  */ : "ezp_async_with_stmt",
}

ezP.T3.Stmt.Previous = {
  import_stmt: [
    ezP.T3.Stmt.import_stmt,
    ezP.T3.Stmt.docstring_top_stmt,
  ],
  elif_part: [
    ezP.T3.Stmt.if_part,
    ezP.T3.Stmt.elif_part,
  ],
  else_part: [
    ezP.T3.Stmt.if_part,
    ezP.T3.Stmt.elif_part,
    ezP.T3.Stmt.while_part,
    ezP.T3.Stmt.for_part,
    ezP.T3.Stmt.except_part,
    ezP.T3.Stmt.void_except_part,
  ],
  except_part: [
    ezP.T3.Stmt.try_part,
    ezP.T3.Stmt.except_part,
  ],
  void_except_part: [
    ezP.T3.Stmt.try_part,
    ezP.T3.Stmt.except_part,
  ],
  finally_part: [
    ezP.T3.Stmt.else_part,
    ezP.T3.Stmt.try_part,
    ezP.T3.Stmt.except_part,
    ezP.T3.Stmt.void_except_part,
  ],
  docstring_def_stmt: [
    ezP.T3.Stmt.funcdef_part,
    ezP.T3.Stmt.classdef_part,
  ],
}


ezP.T3.Stmt.Next = {
  try_part: [
    ezP.T3.Stmt.except_part,
    ezP.T3.Stmt.void_except_part,
    ezP.T3.Stmt.finally_part,
  ],
  except_part: [
    ezP.T3.Stmt.else_part,
    ezP.T3.Stmt.except_part,
    ezP.T3.Stmt.void_except_part,
    ezP.T3.Stmt.finally_part,
  ],
  void_except_part: [
    ezP.T3.Stmt.finally_part,
  ],
  decorator_part: [
    ezP.T3.Stmt.funcdef_part,
    ezP.T3.Stmt.decorator_part,
    ezP.T3.Stmt.classdef_part,
  ],
}


ezP.T3.Stmt.Available = []

ezP.T3.Expr = {
// core expressions
  imagnumber                /*   ::=                                                    */ : "ezp_imagnumber",
  stringliteral             /*   ::=                                                    */ : "ezp_stringliteral",
  non_void_expression_list  /*   ::=                                                    */ : "ezp_non_void_expression_list",
  starred_target            /*   ::=                                                    */ : "ezp_starred_target",
  numberliteral_concrete    /*   ::=                                                    */ : "ezp_numberliteral_concrete",
  floatnumber               /*   ::=                                                    */ : "ezp_floatnumber",
  integer                   /*   ::=                                                    */ : "ezp_integer",
  bytesliteral              /*   ::=                                                    */ : "ezp_bytesliteral",
  parenth_form              /*   ::= "(" [starred_expression] ")"                       */ : "ezp_parenth_form",
  comprehension             /*   ::= expression comp_for                                */ : "ezp_comprehension",
  comp_for                  /*   ::= [ASYNC] "for" target_list "in" or_test [comp_iter] */ : "ezp_comp_for",
  comp_if                   /*   ::= "if" expression_nocond [comp_iter]                 */ : "ezp_comp_if",
  list_display              /*   ::= "[" [starred_list | comprehension] "]"             */ : "ezp_list_display",
  set_display               /*   ::= "{" (starred_list | comprehension) "}"             */ : "ezp_set_display",
  dict_display              /*   ::= "{" [key_datum_list | dict_comprehension] "}"      */ : "ezp_dict_display",
  dict_comprehension        /*   ::= expression ":" expression comp_for                 */ : "ezp_dict_comprehension",
  generator_expression      /*   ::= "(" expression comp_for ")"                        */ : "ezp_generator_expression",
  yield_atom                /*   ::= "(" yield_expression ")"                           */ : "ezp_yield_atom",
  attributeref              /*   ::= primary "." identifier                             */ : "ezp_attributeref",
  subscription              /*   ::= primary "[" expression_list "]"                    */ : "ezp_subscription",
  slicing                   /*   ::= primary display_slice_list                         */ : "ezp_slicing",
  proper_slice              /*   ::= [lower_bound] ":" [upper_bound] [ ":" [stride] ]   */ : "ezp_proper_slice",
  call_expr                 /*   ::= primary "(" [argument_list [","] | comprehension] ")" */ : "ezp_call_expr",
  argument_list_concrete_0  /*   ::= positional_arguments [ "," starred_and_keywords ] [ "," keywords_arguments ]  */ : "ezp_argument_list_concrete_0",
  argument_list_concrete_1  /*   ::= starred_and_keywords [ "," keywords_arguments ]    */ : "ezp_argument_list_concrete_1",
  starred_and_keywords      /*   ::= ("*" expression | keyword_item) ("," "*" expression | "," keyword_item)* */ : "ezp_starred_and_keywords",
  keywords_arguments        /*   ::= (keyword_item | "**" expression) ("," keyword_item | "," "**" expression)* */ : "ezp_keywords_arguments",
  keyword_item              /*   ::= identifier "=" expression                          */ : "ezp_keyword_item",
  await_expr                /*   ::= "await" primary                                    */ : "ezp_await_expr",
  power_concrete            /*   ::= await_or_primary "**" u_expr                       */ : "ezp_power_concrete",
  u_expr_concrete           /*   ::= "-" u_expr | "+" u_expr | "~" u_expr               */ : "ezp_u_expr_concrete",
  m_expr_concrete           /*   ::= m_expr "*" u_expr | m_expr "@" m_expr | m_expr "//" u_expr| m_expr "/" u_expr | m_expr "%" u_expr */ : "ezp_m_expr_concrete",
  a_expr_concrete           /*   ::= a_expr "+" m_expr | a_expr "-" m_expr              */ : "ezp_a_expr_concrete",
  shift_expr_concrete       /*   ::= shift_expr ( "<<" | ">>" ) a_expr                  */ : "ezp_shift_expr_concrete",
  and_expr_concrete         /*   ::= and_expr "&" shift_expr                            */ : "ezp_and_expr_concrete",
  xor_expr_concrete         /*   ::= xor_expr "^" and_expr                              */ : "ezp_xor_expr_concrete",
  or_expr_concrete          /*   ::= or_expr "|" xor_expr                               */ : "ezp_or_expr_concrete",
  comp_operator             /*   ::= "<" | ">" | "==" | ">=" | "<=" | "!=" | "is" ["not"] | ["not"] "in" */ : "ezp_comp_operator",
  or_test_concrete          /*   ::= or_test "or" and_test                              */ : "ezp_or_test_concrete",
  and_test_concrete         /*   ::= and_test "and" not_test                            */ : "ezp_and_test_concrete",
  not_test_concrete         /*   ::= "not" not_test                                     */ : "ezp_not_test_concrete",
  conditional_expression_concrete /*   ::= or_test "if" or_test "else" expression             */ : "ezp_conditional_expression_concrete",
  lambda_expr               /*   ::= "lambda" [parameter_list]: expression              */ : "ezp_lambda_expr",
  lambda_expr_nocond        /*   ::= "lambda" [parameter_list]: expression_nocond       */ : "ezp_lambda_expr_nocond",
  starred_item_list         /*   ::= starred_item ? ( ',' starred_item ) * [',']        */ : "ezp_starred_item_list",
  star_expr                 /*   ::= "*" or_expr                                        */ : "ezp_star_expr",
  optional_expression_list  /*   ::= ( expression ',' )* [ expression ]                 */ : "ezp_optional_expression_list",
  key_datum_concrete        /*   ::= expression ":" expression                          */ : "ezp_key_datum_concrete",
  or_expr_star_star         /*   ::= "**" or_expr                                       */ : "ezp_or_expr_star_star",
  yield_expression_list     /*   ::= "yield" expression_list                            */ : "ezp_yield_expression_list",
  yield_from_expression     /*   ::= "yield" "from" expression                          */ : "ezp_yield_from_expression",
  dotted_identifier         /*   ::= "." identifier                                     */ : "ezp_dotted_identifier",
  display_slice_list        /*   ::= "[" slice_list "]"                                 */ : "ezp_display_slice_list",
  call_expr                 /*   ::= primary "(" [argument_list [","] | comprehension] ")" */ : "ezp_call_expr",
  expression_star           /*   ::= "*" expression                                     */ : "ezp_expression_star",
  expression_star_star      /*   ::= "**" expression                                    */ : "ezp_expression_star_star",
  comparison_concrete       /*   ::= comparison comp_operator comparison                */ : "ezp_comparison_concrete",
  augop                     /*   ::= "+=" | "-=" | "*=" | "@=" | "/=" | "//=" | "%=" | "**=" | ">>=" | "<<=" | "&=" | "^=" | "|=" */ : "ezp_augop",
  module_concrete           /*   ::= module '.' module_name                             */ : "ezp_module_concrete",
  assignment_expression     /*   ::= target_list "=" assigned_expression                */ : "ezp_assignment_expression",
  augmented_assignment_expression /*   ::= augtarget augop aug_assigned                       */ : "ezp_augmented_assignment_expression",
  bracket_target_list       /*   ::= "[" void_target_list "]"                           */ : "ezp_bracket_target_list",
  parenth_target_list       /*   ::= "(" void_target_list ")"                           */ : "ezp_parenth_target_list",
  target_star               /*   ::= "*" target                                         */ : "ezp_target_star",
  something_star            /*   ::= "*" something                                      */ : "ezp_something_star",
  import_module             /*   ::= "import" non_void_module_named_list                */ : "ezp_import_module",
  module_named_concrete     /*   ::= module "as" module_name                            */ : "ezp_module_named_concrete",
  from_relative_module_import /*   ::= "from" relative_module "import" non_void_identifier_named_list */ : "ezp_from_relative_module_import",
  parent_module             /*   ::= '.' [relative_module]                              */ : "ezp_parent_module",
  identifier_named          /*   ::= identifier "as" import_name                        */ : "ezp_identifier_named",
  identifier                /*   ::= an identifier but not a variable name              */ : "ezp_identifier",
  import_name               /*   ::= the usage name of an imported identifier           */ : "ezp_import_name",
  from_module_import        /*   ::= "from" module "import" "*"                         */ : "ezp_from_module_import",
  with_item_concrete        /*   ::= expression "as" target                             */ : "ezp_with_item_concrete",
  parameter_list_concrete   /*   ::= defparameter ( "," defparameter ) * [ "," [ parameter_list_starargs ] ]  */ : "ezp_parameter_list_concrete",
  parameter_list_starargs   /*   ::= "*" [parameter] ("," defparameter)* ["," ["**" parameter [","]]] | "**" parameter [","] */ : "ezp_parameter_list_starargs",
  parameter_concrete        /*   ::= identifier ":" expression                          */ : "ezp_parameter_concrete",
  defparameter_concrete     /*   ::= parameter "=" expression                           */ : "ezp_defparameter_concrete",
  inheritance               /*   ::= "(" [argument_list] ")"                            */ : "ezp_inheritance",
  dotted_funcname_concrete  /*   ::= dotting_identifier '.' dotted_funcname             */ : "ezp_dotted_funcname_concrete",
  parenth_argument_list     /*   ::= "(" [argument_list [","]] ")"                      */ : "ezp_parenth_argument_list",
  parameter_star            /*   ::= "*" [parameter]                                    */ : "ezp_parameter_star",
  parameter_star_star       /*   ::= "**" parameter                                     */ : "ezp_parameter_star_star",
// lists
  key_datum_list            /*   ::= key_datum ("," key_datum)* [","]                   */ : "ezp_key_datum_list",
  slice_list                /*   ::= slice_item ("," slice_item)* [","]                 */ : "ezp_slice_list",
  non_void_starred_item_list /*   ::= starred_item ( ',' starred_item ) * [',']          */ : "ezp_non_void_starred_item_list",
  comp_iter_list            /*   ::= (comp_iter) *                                      */ : "ezp_comp_iter_list",
  target_list               /*   ::= target ("," target)* [","]                         */ : "ezp_target_list",
  non_void_module_named_list /*   ::= module_named ( "," module_named )*                 */ : "ezp_non_void_module_named_list",
  non_void_identifier_named_list /*   ::= identifier_named ( "," identifier_named )*         */ : "ezp_non_void_identifier_named_list",
  identifier_list           /*   ::= identifier ("," identifier)*                       */ : "ezp_identifier_list",
  stmt_list                 /*   ::= simple_stmt (";" simple_stmt)* [";"]               */ : "ezp_stmt_list",
  dotted_name               /*   ::= identifier ("." identifier)*                       */ : "ezp_dotted_name",
  with_item_list            /*   ::= with_item ("," with_item)*                         */ : "ezp_with_item_list",
// wrappers, like starred_item ::=  expression | star_expr
  atom                      /*   ::= identifier | literal | enclosure                   */ : "ezp_atom",
  enclosure                 /*   ::= parenth_form | list_display | dict_display | set_display | generator_expression | yield_atom */ : "ezp_enclosure",
  literal                   /*   ::= stringliteral | numberliteral | imagnumber         */ : "ezp_literal",
  comp_iter                 /*   ::= comp_for | comp_if                                 */ : "ezp_comp_iter",
  key_datum                 /*   ::= key_datum_concrete | or_expr_star_star             */ : "ezp_key_datum",
  yield_expression          /*   ::= yield_expression_list | yield_from_expression      */ : "ezp_yield_expression",
  primary                   /*   ::= atom | attributeref | subscription | slicing | call */ : "ezp_primary",
  slice_item                /*   ::= expression | proper_slice                          */ : "ezp_slice_item",
  argument_list             /*   ::= argument_list_concrete_0 | argument_list_concrete_1 | keywords_arguments */ : "ezp_argument_list",
  power                     /*   ::= await_or_primary | power_concrete                  */ : "ezp_power",
  u_expr                    /*   ::= power | u_expr_concrete                            */ : "ezp_u_expr",
  m_expr                    /*   ::= u_expr | m_expr_concrete                           */ : "ezp_m_expr",
  a_expr                    /*   ::= m_expr | a_expr_concrete                           */ : "ezp_a_expr",
  shift_expr                /*   ::= a_expr | shift_expr_concrete                       */ : "ezp_shift_expr",
  and_expr                  /*   ::= shift_expr | and_expr_concrete                     */ : "ezp_and_expr",
  xor_expr                  /*   ::= and_expr | xor_expr_concrete                       */ : "ezp_xor_expr",
  or_expr                   /*   ::= xor_expr | or_expr_concrete                        */ : "ezp_or_expr",
  comparison                /*   ::= or_expr | comparison_concrete                      */ : "ezp_comparison",
  or_test                   /*   ::= and_test | or_test_concrete                        */ : "ezp_or_test",
  and_test                  /*   ::= not_test | and_test_concrete                       */ : "ezp_and_test",
  not_test                  /*   ::= comparison | not_test_concrete                     */ : "ezp_not_test",
  conditional_expression    /*   ::= or_test | conditional_expression_concrete          */ : "ezp_conditional_expression",
  expression                /*   ::= conditional_expression | lambda_expr               */ : "ezp_expression",
  expression_nocond         /*   ::= or_test | lambda_expr_nocond                       */ : "ezp_expression_nocond",
  starred_item              /*   ::= expression | star_expr                             */ : "ezp_starred_item",
  numberliteral             /*   ::= bytesliteral | integer | floatnumber | numberliteral_concrete */ : "ezp_numberliteral",
  non_void_starred_item_list_comprehensive /*   ::= starred_item | comprehension                       */ : "ezp_non_void_starred_item_list_comprehensive",
  key_datum_list_comprehensive /*   ::= key_datum | dict_comprehension                     */ : "ezp_key_datum_list_comprehensive",
  any_argument              /*   ::= expression | expression_star | keyword_item | expression_star_star */ : "ezp_any_argument",
  any_argument_but_star_star /*   ::= expression | expression_star | keyword_item        */ : "ezp_any_argument_but_star_star",
  any_argument_but_expression /*   ::= expression_star | keyword_item | expression_star_star */ : "ezp_any_argument_but_expression",
  any_argument_comprehensive /*   ::= any_argument | comprehension                       */ : "ezp_any_argument_comprehensive",
  await_or_primary          /*   ::= await_expr | primary                               */ : "ezp_await_or_primary",
  algebra_concrete          /*   ::= m_expr_concrete | a_expr_concrete                  */ : "ezp_algebra_concrete",
  bitwise_concrete          /*   ::= shift_expr_concrete | and_expr_concrete | xor_expr_concrete | or_expr_concrete */ : "ezp_bitwise_concrete",
  boolean_concrete          /*   ::= and_test_concrete | or_test_concrete               */ : "ezp_boolean_concrete",
  unary_concrete            /*   ::= u_expr_concrete | not_test_concrete                */ : "ezp_unary_concrete",
  target                    /*   ::= identifier | parenth_target_list | bracket_target_list | attributeref | subscription | slicing | starred_target */ : "ezp_target",
  augtarget                 /*   ::= identifier | attributeref | subscription | slicing */ : "ezp_augtarget",
  module                    /*   ::= module_name | module_concrete                      */ : "ezp_module",
  relative_module           /*   ::= module | parent_module                             */ : "ezp_relative_module",
  assigned_expression       /*   ::= starred_expression | yield_expression | assignment_expression */ : "ezp_assigned_expression",
  aug_assigned              /*   ::= expression_list | yield_expression                 */ : "ezp_aug_assigned",
  import_expr               /*   ::= import_module | from_relative_module_import | from_module_import */ : "ezp_import_expr",
  module_named              /*   ::= module | module_named_concrete                     */ : "ezp_module_named",
  with_item                 /*   ::= expression | with_item_concrete                    */ : "ezp_with_item",
  parameter_list            /*   ::= parameter_list_concrete | parameter_list_starargs  */ : "ezp_parameter_list",
  parameter                 /*   ::= identifier | parameter_concrete                    */ : "ezp_parameter",
  defparameter              /*   ::= parameter | defparameter_concrete                  */ : "ezp_defparameter",
  dotted_funcname           /*   ::= funcname | dotted_funcname_concrete                */ : "ezp_dotted_funcname",
  parameter_any             /*   ::= parameter | defparameter | parameter_star | parameter_star_star */ : "ezp_parameter_any",
  parameter_no_single_star  /*   ::= parameter | defparameter | parameter_star_star     */ : "ezp_parameter_no_single_star",
  parameter_no_star_star    /*   ::= parameter | defparameter | parameter_star          */ : "ezp_parameter_no_star_star",
  parameter_no_star         /*   ::= parameter | defparameter                           */ : "ezp_parameter_no_star",
}

// aliases
ezP.T3.Expr.lower_bound = ezP.T3.Expr.expression
ezP.T3.Expr.upper_bound = ezP.T3.Expr.expression
ezP.T3.Expr.stride = ezP.T3.Expr.expression
ezP.T3.Expr.expression_list = ezP.T3.Expr.non_void_expression_list
ezP.T3.Expr.non_void_starred_item_list = ezP.T3.Expr.non_void_starred_item_list
ezP.T3.Expr.starred_item_list = ezP.T3.Expr.starred_item_list
ezP.T3.Expr.non_void_starred_item_list_comprehensive = ezP.T3.Expr.non_void_starred_item_list_comprehensive
ezP.T3.Expr.feature = ezP.T3.Expr.identifier
ezP.T3.Expr.module_name = ezP.T3.Expr.identifier
ezP.T3.Expr.funcname = ezP.T3.Expr.identifier
ezP.T3.Expr.classname = ezP.T3.Expr.identifier
ezP.T3.Expr.dotting_identifier = ezP.T3.Expr.identifier

// special aliases, some types that change naming across the documentation
ezP.T3.Expr.or_expr_star = ezP.T3.Expr.star_expr

ezP.T3.Expr.Check = {
  atom: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.identifier,
  ],
  enclosure: [
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
  ],
  literal: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
  ],
  comp_iter: [
    ezP.T3.Expr.comp_for,
    ezP.T3.Expr.comp_if,
  ],
  key_datum: [
    ezP.T3.Expr.key_datum_concrete,
    ezP.T3.Expr.or_expr_star_star,
  ],
  yield_expression: [
    ezP.T3.Expr.yield_expression_list,
    ezP.T3.Expr.yield_from_expression,
  ],
  primary: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.identifier,
  ],
  slice_item: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.proper_slice,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  argument_list: [
    ezP.T3.Expr.argument_list_concrete_0,
    ezP.T3.Expr.argument_list_concrete_1,
    ezP.T3.Expr.keywords_arguments,
  ],
  power: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.identifier,
  ],
  u_expr: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.identifier,
  ],
  m_expr: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.identifier,
  ],
  a_expr: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.identifier,
  ],
  shift_expr: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.identifier,
  ],
  and_expr: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.identifier,
  ],
  xor_expr: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.identifier,
  ],
  or_expr: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.identifier,
  ],
  comparison: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  or_test: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  and_test: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  not_test: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  conditional_expression: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  expression: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  expression_nocond: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.lambda_expr_nocond,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  starred_item: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.star_expr,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  numberliteral: [
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
  ],
  non_void_starred_item_list_comprehensive: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.comprehension,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.star_expr,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  key_datum_list_comprehensive: [
    ezP.T3.Expr.dict_comprehension,
    ezP.T3.Expr.key_datum_concrete,
    ezP.T3.Expr.or_expr_star_star,
  ],
  any_argument: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.keyword_item,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.expression_star,
    ezP.T3.Expr.expression_star_star,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  any_argument_but_star_star: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.keyword_item,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.expression_star,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  any_argument_but_expression: [
    ezP.T3.Expr.keyword_item,
    ezP.T3.Expr.expression_star,
    ezP.T3.Expr.expression_star_star,
  ],
  any_argument_comprehensive: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.comprehension,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.keyword_item,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.expression_star,
    ezP.T3.Expr.expression_star_star,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  await_or_primary: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.identifier,
  ],
  algebra_concrete: [
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
  ],
  bitwise_concrete: [
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
  ],
  boolean_concrete: [
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
  ],
  unary_concrete: [
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.not_test_concrete,
  ],
  target: [
    ezP.T3.Expr.starred_target,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.bracket_target_list,
    ezP.T3.Expr.parenth_target_list,
    ezP.T3.Expr.identifier,
  ],
  augtarget: [
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.identifier,
  ],
  module: [
    ezP.T3.Expr.module_concrete,
    ezP.T3.Expr.identifier,
  ],
  relative_module: [
    ezP.T3.Expr.module_concrete,
    ezP.T3.Expr.parent_module,
    ezP.T3.Expr.identifier,
  ],
  assigned_expression: [
    ezP.T3.Expr.starred_item_list,
    ezP.T3.Expr.yield_expression_list,
    ezP.T3.Expr.yield_from_expression,
    ezP.T3.Expr.assignment_expression,
  ],
  aug_assigned: [
    ezP.T3.Expr.non_void_expression_list,
    ezP.T3.Expr.yield_expression_list,
    ezP.T3.Expr.yield_from_expression,
  ],
  import_expr: [
    ezP.T3.Expr.import_module,
    ezP.T3.Expr.from_relative_module_import,
    ezP.T3.Expr.from_module_import,
  ],
  module_named: [
    ezP.T3.Expr.module_concrete,
    ezP.T3.Expr.module_named_concrete,
    ezP.T3.Expr.identifier,
  ],
  with_item: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.with_item_concrete,
  ],
  parameter_list: [
    ezP.T3.Expr.parameter_list_concrete,
    ezP.T3.Expr.parameter_list_starargs,
  ],
  parameter: [
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
  ],
  defparameter: [
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
    ezP.T3.Expr.defparameter_concrete,
  ],
  dotted_funcname: [
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.dotted_funcname_concrete,
  ],
  parameter_any: [
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
    ezP.T3.Expr.defparameter_concrete,
    ezP.T3.Expr.parameter_star,
    ezP.T3.Expr.parameter_star_star,
  ],
  parameter_no_single_star: [
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
    ezP.T3.Expr.defparameter_concrete,
    ezP.T3.Expr.parameter_star_star,
  ],
  parameter_no_star_star: [
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
    ezP.T3.Expr.defparameter_concrete,
    ezP.T3.Expr.parameter_star,
  ],
  parameter_no_star: [
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
    ezP.T3.Expr.defparameter_concrete,
  ],
  key_datum_list: [
    ezP.T3.Expr.key_datum_concrete,
    ezP.T3.Expr.or_expr_star_star,
  ],
  slice_list: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.proper_slice,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  non_void_starred_item_list: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.star_expr,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
  ],
  comp_iter_list: [
    ezP.T3.Expr.comp_for,
    ezP.T3.Expr.comp_if,
  ],
  target_list: [
    ezP.T3.Expr.starred_target,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.bracket_target_list,
    ezP.T3.Expr.parenth_target_list,
    ezP.T3.Expr.identifier,
  ],
  non_void_module_named_list: [
    ezP.T3.Expr.module_concrete,
    ezP.T3.Expr.module_named_concrete,
    ezP.T3.Expr.identifier,
  ],
  non_void_identifier_named_list: [
    ezP.T3.Expr.identifier_named,
  ],
  identifier_list: [
    ezP.T3.Expr.identifier,
  ],
  stmt_list: [
    ezP.T3.Expr.simple_stmt,
  ],
  dotted_name: [
    ezP.T3.Expr.identifier,
  ],
  with_item_list: [
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.stringliteral,
    ezP.T3.Expr.numberliteral_concrete,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.bytesliteral,
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.comparison_concrete,
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.with_item_concrete,
  ],
}

// alias checks
ezP.T3.Expr.Check.lower_bound = ezP.T3.Expr.Check.expression
ezP.T3.Expr.Check.upper_bound = ezP.T3.Expr.Check.expression
ezP.T3.Expr.Check.stride = ezP.T3.Expr.Check.expression
ezP.T3.Expr.Check.expression_list = ezP.T3.Expr.Check.non_void_expression_list
ezP.T3.Expr.Check.non_void_starred_item_list = ezP.T3.Expr.Check.non_void_starred_item_list
ezP.T3.Expr.Check.starred_item_list = ezP.T3.Expr.Check.starred_item_list
ezP.T3.Expr.Check.non_void_starred_item_list_comprehensive = ezP.T3.Expr.Check.non_void_starred_item_list_comprehensive
ezP.T3.Expr.Check.feature = ezP.T3.Expr.Check.identifier
ezP.T3.Expr.Check.module_name = ezP.T3.Expr.Check.identifier
ezP.T3.Expr.Check.funcname = ezP.T3.Expr.Check.identifier
ezP.T3.Expr.Check.classname = ezP.T3.Expr.Check.identifier
ezP.T3.Expr.Check.dotting_identifier = ezP.T3.Expr.Check.identifier

ezP.T3.Expr.Available = []