// This file was generated by "python types.py" on 2018-04-04 21:23:49.530962

/**
 * ezPython
 *
 * Copyright 2018 Jérôme LAURENS.
 *
 * License CeCILL-B
 */
/**
 * @fileoverview Type constants for ezPython, used as blocks prototypes.
 * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
 */
'use strict'

/**
 * @name ezP.T3
 * @namespace
 **/

goog.provide('ezP.T3')
goog.provide('ezP.T3.Expr')
goog.provide('ezP.T3.Stmt')

goog.require('ezP')


ezP.T3 = {}

ezP.T3.Stmt = {
// part statements
  import_part               /*   ::= import_expr                                        (default) */ : "ezp:import_part",
  if_part                   /*   ::= "if" expression ":"                                (default) */ : "ezp:if_part",
  elif_part                 /*   ::= "elif" expression ":"                              (default) */ : "ezp:elif_part",
  else_part                 /*   ::= "else" ":"                                         (default) */ : "ezp:else_part",
  last_else_part            /*   ::= else_part                                          (default) */ : "ezp:last_else_part",
  while_part                /*   ::= "while" expression ":"                             (default) */ : "ezp:while_part",
  for_part                  /*   ::= "for" target_list "in" expression_list ":"         (default) */ : "ezp:for_part",
  try_part                  /*   ::= "try" ":"                                          (default) */ : "ezp:try_part",
  void_except_part          /*   ::= "except" ":"                                       (default) */ : "ezp:void_except_part",
  except_part               /*   ::= "except" expression_except ":"                     (default) */ : "ezp:except_part",
  finally_part              /*   ::= "finally" ":"                                      (default) */ : "ezp:finally_part",
  try_else_part             /*   ::= else_part                                          (default) */ : "ezp:try_else_part",
  with_part                 /*   ::= "with" with_item_list ":"                          (default) */ : "ezp:with_part",
  funcdef_part              /*   ::= funcdef_expr ":"                                   (default) */ : "ezp:funcdef_part",
  classdef_part             /*   ::= classdef_expr ':'                                  (default) */ : "ezp:classdef_part",
// other simple statements
  expression_stmt           /*   ::= starred_expression                                 (default) */ : "ezp:expression_stmt",
  assignment_stmt           /*   ::= assignment_expression                              (default) */ : "ezp:assignment_stmt",
  annotated_assignment_stmt /*   ::= augtarget ":" expression ["=" expression]          (default) */ : "ezp:annotated_assignment_stmt",
  assert_stmt               /*   ::= "assert" expression ["," expression]               (default) */ : "ezp:assert_stmt",
  pass_stmt                 /*   ::= "pass"                                             (default) */ : "ezp:pass_stmt",
  del_stmt                  /*   ::= "del" target_list                                  (default) */ : "ezp:del_stmt",
  return_stmt               /*   ::= "return" [expression_list]                         (default) */ : "ezp:return_stmt",
  yield_stmt                /*   ::= yield_expression                                   (default) */ : "ezp:yield_stmt",
  raise_stmt                /*   ::= "raise" raise_expression                           (default) */ : "ezp:raise_stmt",
  break_stmt                /*   ::= "break"                                            (default) */ : "ezp:break_stmt",
  continue_stmt             /*   ::= "continue"                                         (default) */ : "ezp:continue_stmt",
  future_statement          /*   ::= "from" "__future__" "import" feature ["as" name] ("," feature ["as" name])* | "from" "__future__" "import" "(" feature ["as" name] ("," feature ["as" name])* [","] ")" (default) */ : "ezp:future_statement",
  start_stmt                /*   ::= green flag statement                               (default) */ : "ezp:start_stmt",
  augassign_numeric_stmt    /*   ::= augassign_numeric                                  (default) */ : "ezp:augassign_numeric_stmt",
  augassign_bitwise_stmt    /*   ::= augassign_bitwise                                  (default) */ : "ezp:augassign_bitwise_stmt",
  docstring_top_stmt        /*   ::= longstringliteral+{1}                              (default) */ : "ezp:docstring_top_stmt",
  global_nonlocal_stmt      /*   ::= ("global"|"nonlocal") non_void_identifier_list     (default) */ : "ezp:global_nonlocal_stmt",
  comment_stmt              /*   ::= '# blah blah'                                      (default) */ : "ezp:comment_stmt",
  reraise_stmt              /*   ::= "raise"                                            (default) */ : "ezp:reraise_stmt",
  decorator_stmt            /*   ::= decorator                                          (default) */ : "ezp:decorator_stmt",
  docstring_def_stmt        /*   ::= longstringliteral +{1}                             (default) */ : "ezp:docstring_def_stmt",
  print_stmt                /*   ::= print                                              (default) */ : "ezp:print_stmt",
  input_stmt                /*   ::= input                                              (default) */ : "ezp:input_stmt",
// compound statements
}

ezP.T3.Stmt.Previous = {
  import_part: [ // count 5
    ezP.T3.Stmt.import_part,
    ezP.T3.Stmt.future_statement,
    ezP.T3.Stmt.start_stmt,
    ezP.T3.Stmt.docstring_top_stmt,
    ezP.T3.Stmt.comment_stmt,
  ],
  future_statement: [ // count 5
    ezP.T3.Stmt.import_part,
    ezP.T3.Stmt.future_statement,
    ezP.T3.Stmt.start_stmt,
    ezP.T3.Stmt.docstring_top_stmt,
    ezP.T3.Stmt.comment_stmt,
  ],
  docstring_top_stmt: [ // count 3
    ezP.T3.Stmt.start_stmt,
    ezP.T3.Stmt.docstring_top_stmt,
    ezP.T3.Stmt.comment_stmt,
  ],
  elif_part: [ // count 3
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.if_part,
    ezP.T3.Stmt.elif_part,
  ],
  else_part: [ // count 7
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.if_part,
    ezP.T3.Stmt.elif_part,
    ezP.T3.Stmt.while_part,
    ezP.T3.Stmt.for_part,
    ezP.T3.Stmt.void_except_part,
    ezP.T3.Stmt.except_part,
  ],
  last_else_part: [ // count 5
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.if_part,
    ezP.T3.Stmt.elif_part,
    ezP.T3.Stmt.while_part,
    ezP.T3.Stmt.for_part,
  ],
  void_except_part: [ // count 3
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.try_part,
    ezP.T3.Stmt.except_part,
  ],
  except_part: [ // count 3
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.try_part,
    ezP.T3.Stmt.except_part,
  ],
  finally_part: [ // count 6
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.else_part,
    ezP.T3.Stmt.try_part,
    ezP.T3.Stmt.void_except_part,
    ezP.T3.Stmt.except_part,
    ezP.T3.Stmt.try_else_part,
  ],
  try_else_part: [ // count 3
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.void_except_part,
    ezP.T3.Stmt.except_part,
  ],
  docstring_def_stmt: [ // count 4
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.funcdef_part+"."+ezP.Key.DO,
    ezP.T3.Stmt.classdef_part+"."+ezP.Key.DO,
    ezP.T3.Stmt.docstring_def_stmt,
  ],
}


ezP.T3.Stmt.Next = {
  try_part: [ // count 4
    ezP.T3.Stmt.comment_stmt,
    ezP.T3.Stmt.void_except_part,
    ezP.T3.Stmt.except_part,
    ezP.T3.Stmt.finally_part,
  ],
  decorator_stmt: [ // count 3
    ezP.T3.Stmt.funcdef_part,
    ezP.T3.Stmt.decorator_stmt,
    ezP.T3.Stmt.classdef_part,
  ],
}


ezP.T3.Stmt.Available = []

ezP.T3.Expr = {
// core expressions
  non_void_expression_list  /*   ::=                                                    (default) */ : "ezp:non_void_expression_list",
  module_identifier         /*   ::=                                                    (default) */ : "ezp:module_identifier",
  attribute_identifier      /*   ::=                                                    (default) */ : "ezp:attribute_identifier",
  parenth_form              /*   ::= "(" [starred_expression] ")"                       (default) */ : "ezp:parenth_form",
  comprehension             /*   ::= expression comp_for                                (default) */ : "ezp:comprehension",
  comp_for                  /*   ::= [ASYNC] "for" target_list "in" or_test [comp_iter] (default) */ : "ezp:comp_for",
  comp_if                   /*   ::= "if" expression_nocond [comp_iter]                 (default) */ : "ezp:comp_if",
  list_display              /*   ::= "[" starred_item_list_comprehensive "]"            (default) */ : "ezp:list_display",
  set_display               /*   ::= "{" non_void_starred_item_list_comprehensive "}"   (default) */ : "ezp:set_display",
  dict_display              /*   ::= "{" [key_datum_list | dict_comprehension] "}"      (default) */ : "ezp:dict_display",
  dict_comprehension        /*   ::= expression ":" expression comp_for                 (default) */ : "ezp:dict_comprehension",
  generator_expression      /*   ::= "(" expression comp_for ")"                        (default) */ : "ezp:generator_expression",
  yield_atom                /*   ::= "(" yield_expression ")"                           (default) */ : "ezp:yield_atom",
  attributeref              /*   ::= primary "." identifier                             (default) */ : "ezp:attributeref",
  subscription              /*   ::= primary "[" expression_list "]"                    (default) */ : "ezp:subscription",
  slicing                   /*   ::= primary display_slice_list                         (default) */ : "ezp:slicing",
  proper_slice              /*   ::= [lower_bound] ":" [upper_bound] [ ":" [stride] ]   (default) */ : "ezp:proper_slice",
  call_expr                 /*   ::= primary "(" [argument_list [","] | comprehension] ")" (default) */ : "ezp:call_expr",
  argument_list             /*   ::= argument_any *                                     (default) */ : "ezp:argument_list",
  keyword_item              /*   ::= identifier "=" expression                          (default) */ : "ezp:keyword_item",
  await_expr                /*   ::= "await" primary                                    (default) */ : "ezp:await_expr",
  power_concrete            /*   ::= await_or_primary "**" u_expr                       (default) */ : "ezp:power_concrete",
  u_expr_concrete           /*   ::= "-" u_expr | "+" u_expr | "~" u_expr               (default) */ : "ezp:u_expr_concrete",
  m_expr_concrete           /*   ::= m_expr "*" u_expr | m_expr "@" m_expr | m_expr "//" u_expr| m_expr "/" u_expr | m_expr "%" u_expr (default) */ : "ezp:m_expr_concrete",
  a_expr_concrete           /*   ::= a_expr "+" m_expr | a_expr "-" m_expr              (default) */ : "ezp:a_expr_concrete",
  shift_expr_concrete       /*   ::= shift_expr ( "<<" | ">>" ) a_expr                  (default) */ : "ezp:shift_expr_concrete",
  and_expr_concrete         /*   ::= and_expr "&" shift_expr                            (default) */ : "ezp:and_expr_concrete",
  xor_expr_concrete         /*   ::= xor_expr "^" and_expr                              (default) */ : "ezp:xor_expr_concrete",
  or_expr_concrete          /*   ::= or_expr "|" xor_expr                               (default) */ : "ezp:or_expr_concrete",
  or_test_concrete          /*   ::= or_test "or" and_test                              (default) */ : "ezp:or_test_concrete",
  and_test_concrete         /*   ::= and_test "and" not_test                            (default) */ : "ezp:and_test_concrete",
  not_test_concrete         /*   ::= "not" not_test                                     (default) */ : "ezp:not_test_concrete",
  conditional_expression_concrete /*   ::= or_test "if" or_test "else" expression             (default) */ : "ezp:conditional_expression_concrete",
  lambda_expr               /*   ::= lambda_expression "dynamic with cond"              (default) */ : "ezp:lambda_expr",
  lambda_expr_nocond        /*   ::= lambda_expression "dynamic without cond"           (default) */ : "ezp:lambda_expr_nocond",
  builtin_object            /*   ::= 'None' | 'True' | 'False' | 'Ellipsis' | '...' |'NotImplemented' (default) */ : "ezp:builtin_object",
  any                       /*   ::= any expression                                     (default) */ : "ezp:any",
  starred_item_list         /*   ::= starred_item ? ( ',' starred_item ) * [',']        (default) */ : "ezp:starred_item_list",
  star_expr                 /*   ::= "*" or_expr                                        (default) */ : "ezp:star_expr",
  optional_expression_list  /*   ::= ( expression ',' )* [ expression ]                 (default) */ : "ezp:optional_expression_list",
  shortstringliteral        /*   ::= ''                                                 (default) */ : "ezp:shortstringliteral",
  shortbytesliteral         /*   ::= b''                                                (default) */ : "ezp:shortbytesliteral",
  longstringliteral         /*   ::= ''''''                                             (default) */ : "ezp:longstringliteral",
  longbytesliteral          /*   ::= b''''''                                            (default) */ : "ezp:longbytesliteral",
  integer                   /*   ::= 123                                                (default) */ : "ezp:integer",
  floatnumber               /*   ::= 123.                                               (default) */ : "ezp:floatnumber",
  imagnumber                /*   ::= 123j                                               (default) */ : "ezp:imagnumber",
  key_datum_concrete        /*   ::= expression ":" expression                          (default) */ : "ezp:key_datum_concrete",
  or_expr_star_star         /*   ::= "**" or_expr                                       (default) */ : "ezp:or_expr_star_star",
  yield_expression_list     /*   ::= "yield" expression_list                            (default) */ : "ezp:yield_expression_list",
  yield_from_expression     /*   ::= "yield" "from" expression                          (default) */ : "ezp:yield_from_expression",
  display_slice_list        /*   ::= "[" slice_list "]"                                 (default) */ : "ezp:display_slice_list",
  call_expr                 /*   ::= primary "(" argument_list_comprehensive ")"        (default) */ : "ezp:call_expr",
  expression_star           /*   ::= "*" expression                                     (default) */ : "ezp:expression_star",
  expression_star_star      /*   ::= "**" expression                                    (default) */ : "ezp:expression_star_star",
  number_comparison         /*   ::= comparison comp_operator comparison                (default) */ : "ezp:number_comparison",
  object_comparison         /*   ::= comparison comp_operator comparison                (default) */ : "ezp:object_comparison",
  lambda_expression         /*   ::= "lambda" [parameter_list]: (expression | expression_no_cond) (default) */ : "ezp:lambda_expression",
  augop                     /*   ::= "+=" | "-=" | "*=" | "@=" | "/=" | "//=" | "%=" | "**=" | ">>=" | "<<=" | "&=" | "^=" | "|=" (default) */ : "ezp:augop",
  module_concrete           /*   ::= module_name '.' module                             (default) */ : "ezp:module_concrete",
  assignment_expression     /*   ::= target_list "=" assigned_list                      (default) */ : "ezp:assignment_expression",
  augassign_numeric         /*   ::= augtarget augop aug_assign_list                    (default) */ : "ezp:augassign_numeric",
  augassign_bitwise         /*   ::= augtarget augop aug_assign_list                    (default) */ : "ezp:augassign_bitwise",
  augassign_list_concrete   /*   ::=  ( expression ',' ) +                              (default) */ : "ezp:augassign_list_concrete",
  parenth_target_list       /*   ::= "(" void_target_list ")"                           (default) */ : "ezp:parenth_target_list",
  bracket_target_list       /*   ::= "[" void_target_list "]"                           (default) */ : "ezp:bracket_target_list",
  void_target_list          /*   ::= [target_list]                                      (default) */ : "ezp:void_target_list",
  target_star               /*   ::= "*" target                                         (default) */ : "ezp:target_star",
  something_star            /*   ::= "*" something                                      (default) */ : "ezp:something_star",
  import_module             /*   ::= "import" non_void_module_as_list                   (default) */ : "ezp:import_module",
  module_as_concrete        /*   ::= module "as" module_alias                           (default) */ : "ezp:module_as_concrete",
  alias                     /*   ::= some alias                                         (default) */ : "ezp:alias",
  from_relative_module_import /*   ::= "from" relative_module "import" non_void_import_identifier_as_list (default) */ : "ezp:from_relative_module_import",
  parent_module             /*   ::= '.' [relative_module]                              (default) */ : "ezp:parent_module",
  import_identifier_as_concrete /*   ::= import_identifier "as" import_alias                (default) */ : "ezp:import_identifier_as_concrete",
  identifier                /*   ::=                                                    (default) */ : "ezp:identifier",
  from_module_import        /*   ::= "from" module "import" "*"                         (default) */ : "ezp:from_module_import",
  expression_from           /*   ::= expression "from" expression                       (default) */ : "ezp:expression_from",
  with_item_concrete        /*   ::= expression "as" target                             (default) */ : "ezp:with_item_concrete",
  parameter_list            /*   ::=                                                    (default) */ : "ezp:parameter_list",
  parameter_list_starargs   /*   ::= "*" [parameter] ("," defparameter)* ["," ["**" parameter [","]]] | "**" parameter [","] (default) */ : "ezp:parameter_list_starargs",
  parameter_concrete        /*   ::= identifier ":" expression                          (default) */ : "ezp:parameter_concrete",
  defparameter_concrete     /*   ::= parameter "=" expression                           (default) */ : "ezp:defparameter_concrete",
  inheritance               /*   ::= "(" [argument_list] ")"                            (default) */ : "ezp:inheritance",
  expression_as_name        /*   ::= expression "as" identifier                         (default) */ : "ezp:expression_as_name",
  funcdef_simple            /*   ::= "def" funcname "(" [parameter_list] ")"            (default) */ : "ezp:funcdef_simple",
  funcdef_typed             /*   ::= funcdef_simple "->" expression                     (default) */ : "ezp:funcdef_typed",
  decorator_expr            /*   ::= "@" dotted_funcname                                (default) */ : "ezp:decorator_expr",
  decorator_call_expr       /*   ::= decorator_expr "(" argument_list ")"               (default) */ : "ezp:decorator_call_expr",
  dotted_funcname_concrete  /*   ::= dotting_identifier '.' dotted_funcname             (default) */ : "ezp:dotted_funcname_concrete",
  parameter_star            /*   ::= "*" [parameter]                                    (default) */ : "ezp:parameter_star",
  parameter_star_star       /*   ::= "**" parameter                                     (default) */ : "ezp:parameter_star_star",
  classdef_simple           /*   ::= "class" classname                                  (default) */ : "ezp:classdef_simple",
  classdef_derived          /*   ::= classdef_simple '(' argument_list ')'              (default) */ : "ezp:classdef_derived",
  print_builtin             /*   ::= "print(" argument_list ")"                         (default) */ : "ezp:print_builtin",
  input_builtin             /*   ::= "input(" [any_argument] ")"                        (default) */ : "ezp:input_builtin",
  sum_builtin               /*   ::= "sum(" argument_list ")"                           (default) */ : "ezp:sum_builtin",
  list_builtin              /*   ::= "list(" argument_list ")"                          (default) */ : "ezp:list_builtin",
  range_builtin             /*   ::= "range(" argument_list ")"                         (default) */ : "ezp:range_builtin",
  len_builtin               /*   ::= "len(" argument_list ")"                           (default) */ : "ezp:len_builtin",
// lists
  key_datum_list            /*   ::= key_datum ("," key_datum)* [","]                   (default) */ : "ezp:key_datum_list",
  slice_list                /*   ::= slice_item ("," slice_item)* [","]                 (default) */ : "ezp:slice_list",
  non_void_starred_item_list /*   ::= starred_item ( ',' starred_item ) * [',']          (default) */ : "ezp:non_void_starred_item_list",
  comp_iter_list            /*   ::= (comp_iter) *                                      (default) */ : "ezp:comp_iter_list",
  target_list               /*   ::= target ("," target)* [","]                         (default) */ : "ezp:target_list",
  non_void_module_as_list   /*   ::= module_as ( "," module_as )*                       (default) */ : "ezp:non_void_module_as_list",
  non_void_import_identifier_as_list /*   ::= import_identifier_as ( "," import_identifier_as )* (default) */ : "ezp:non_void_import_identifier_as_list",
  non_void_identifier_list  /*   ::= identifier ("," identifier)*                       (default) */ : "ezp:non_void_identifier_list",
  dotted_name               /*   ::= identifier ("." identifier)*                       (default) */ : "ezp:dotted_name",
  with_item_list            /*   ::= with_item ("," with_item)*                         (default) */ : "ezp:with_item_list",
// wrappers, like starred_item ::=  expression | star_expr
  atom                      /*   ::= identifier | literal | enclosure | builtin_object  (default) */ : "ezp:atom",
  enclosure                 /*   ::= parenth_form | list_display | dict_display | set_display | generator_expression | yield_atom (default) */ : "ezp:enclosure",
  literal                   /*   ::= shortliteral | longliteral | numberliteral         (default) */ : "ezp:literal",
  comp_iter                 /*   ::= comp_for | comp_if                                 (default) */ : "ezp:comp_iter",
  key_datum                 /*   ::= key_datum_concrete | or_expr_star_star             (default) */ : "ezp:key_datum",
  yield_expression          /*   ::= yield_expression_list | yield_from_expression      (default) */ : "ezp:yield_expression",
  primary                   /*   ::= atom | attributeref | subscription | slicing | call (default) */ : "ezp:primary",
  slice_item                /*   ::= expression | proper_slice                          (default) */ : "ezp:slice_item",
  power                     /*   ::= await_or_primary | power_concrete                  (default) */ : "ezp:power",
  u_expr                    /*   ::= power | u_expr_concrete                            (default) */ : "ezp:u_expr",
  m_expr                    /*   ::= u_expr | m_expr_concrete                           (default) */ : "ezp:m_expr",
  a_expr                    /*   ::= m_expr | a_expr_concrete                           (default) */ : "ezp:a_expr",
  shift_expr                /*   ::= a_expr | shift_expr_concrete                       (default) */ : "ezp:shift_expr",
  and_expr                  /*   ::= shift_expr | and_expr_concrete                     (default) */ : "ezp:and_expr",
  xor_expr                  /*   ::= and_expr | xor_expr_concrete                       (default) */ : "ezp:xor_expr",
  or_expr                   /*   ::= xor_expr | or_expr_concrete                        (default) */ : "ezp:or_expr",
  comparison                /*   ::= or_expr | number_comparison | object_comparison    (default) */ : "ezp:comparison",
  or_test                   /*   ::= and_test | or_test_concrete                        (default) */ : "ezp:or_test",
  and_test                  /*   ::= not_test | and_test_concrete                       (default) */ : "ezp:and_test",
  not_test                  /*   ::= comparison | not_test_concrete                     (default) */ : "ezp:not_test",
  conditional_expression    /*   ::= or_test | conditional_expression_concrete          (default) */ : "ezp:conditional_expression",
  expression                /*   ::= conditional_expression | lambda_expr               (default) */ : "ezp:expression",
  expression_nocond         /*   ::= or_test | lambda_expr_nocond                       (default) */ : "ezp:expression_nocond",
  starred_item              /*   ::= expression | star_expr                             (default) */ : "ezp:starred_item",
  not_a_variable            /*   ::= attribute_identifier | module | module_as | module_identifier | module_alias | import_identifier | import_alias | relative_module | import_identifier_as (default) */ : "ezp:not_a_variable",
  shortliteral              /*   ::= shortstringliteral | shortbytesliteral             (default) */ : "ezp:shortliteral",
  longliteral               /*   ::= longstringliteral | longbytesliteral               (default) */ : "ezp:longliteral",
  bytesliteral              /*   ::= shortbytesliteral | longbytesliteral               (default) */ : "ezp:bytesliteral",
  stringliteral             /*   ::= shortbytesliteral | longbytesliteral               (default) */ : "ezp:stringliteral",
  numberliteral             /*   ::= integer | floatnumber | imagnumber                 (default) */ : "ezp:numberliteral",
  starred_item_list_comprehensive /*   ::= starred_item | comprehension                       (default) */ : "ezp:starred_item_list_comprehensive",
  non_void_starred_item_list_comprehensive /*   ::= starred_item | comprehension                       (default) */ : "ezp:non_void_starred_item_list_comprehensive",
  key_datum_list_comprehensive /*   ::= key_datum | dict_comprehension                     (default) */ : "ezp:key_datum_list_comprehensive",
  argument_any              /*   ::= expression | expression_star | expression_star_star | keyword_item (default) */ : "ezp:argument_any",
  argument_list_comprehensive /*   ::= argument_list | comprehension                      (default) */ : "ezp:argument_list_comprehensive",
  await_or_primary          /*   ::= await_expr | primary                               (default) */ : "ezp:await_or_primary",
  algebra_choice            /*   ::= m_expr_concrete | a_expr_concrete                  (default) */ : "ezp:algebra_choice",
  bitwise_choice            /*   ::= shift_expr_concrete | and_expr_concrete | xor_expr_concrete | or_expr_concrete (default) */ : "ezp:bitwise_choice",
  boolean_choice            /*   ::= and_test_concrete | or_test_concrete               (default) */ : "ezp:boolean_choice",
  unary_choice              /*   ::= u_expr_concrete | not_test_concrete                (default) */ : "ezp:unary_choice",
  target                    /*   ::= target_unstar | target_star                        (default) */ : "ezp:target",
  augtarget                 /*   ::= identifier | attributeref | subscription | slicing (default) */ : "ezp:augtarget",
  module                    /*   ::= module_name | module_concrete                      (default) */ : "ezp:module",
  relative_module           /*   ::= module | parent_module                             (default) */ : "ezp:relative_module",
  assigned_list             /*   ::= starred_item | assigned_single                     (default) */ : "ezp:assigned_list",
  assigned_single           /*   ::= yield_expression | assignment_expression           (default) */ : "ezp:assigned_single",
  augassign_list            /*   ::= augassign_list_concrete | augassign_single         (default) */ : "ezp:augassign_list",
  augassign_single          /*   ::= expression | yield_expression                      (default) */ : "ezp:augassign_single",
  target_unstar             /*   ::= identifier | parenth_target_list | bracket_target_list | attributeref | subscription | slicing (default) */ : "ezp:target_unstar",
  import_expr               /*   ::= import_module | from_relative_module_import | from_module_import (default) */ : "ezp:import_expr",
  module_as                 /*   ::= module | module_as_concrete                        (default) */ : "ezp:module_as",
  module_alias              /*   ::= identifier                                         (default) */ : "ezp:module_alias",
  import_identifier_as      /*   ::= import_identifier | import_identifier_as_concrete  (default) */ : "ezp:import_identifier_as",
  import_identifier         /*   ::= identifier                                         (default) */ : "ezp:import_identifier",
  import_alias              /*   ::= identifier                                         (default) */ : "ezp:import_alias",
  raise_expression          /*   ::= expression | expression_from                       (default) */ : "ezp:raise_expression",
  with_item                 /*   ::= expression | with_item_concrete                    (default) */ : "ezp:with_item",
  decorator                 /*   ::= decorator_expr | decorator_call_expr               (default) */ : "ezp:decorator",
  parameter                 /*   ::= identifier | parameter_concrete                    (default) */ : "ezp:parameter",
  defparameter              /*   ::= parameter | defparameter_concrete                  (default) */ : "ezp:defparameter",
  expression_except         /*   ::= expression | expression_as_name                    (default) */ : "ezp:expression_except",
  funcdef_expr              /*   ::= funcdef_simple | funcdef_typed                     (default) */ : "ezp:funcdef_expr",
  dotted_funcname           /*   ::= funcname | dotted_funcname_concrete                (default) */ : "ezp:dotted_funcname",
  parameter_any             /*   ::= parameter | defparameter | parameter_star | parameter_star_star (default) */ : "ezp:parameter_any",
  classdef_expr             /*   ::= classdef_simple | classdef_derived                 (default) */ : "ezp:classdef_expr",
// wrappers, like module_name ::= identifier because module_name is used in some Check array
}

// aliases
ezP.T3.Expr.lower_bound = ezP.T3.Expr.expression
ezP.T3.Expr.upper_bound = ezP.T3.Expr.expression
ezP.T3.Expr.stride = ezP.T3.Expr.expression
ezP.T3.Expr.expression_list = ezP.T3.Expr.non_void_expression_list
ezP.T3.Expr.feature = ezP.T3.Expr.identifier
ezP.T3.Expr.module_name = ezP.T3.Expr.identifier
ezP.T3.Expr.funcname = ezP.T3.Expr.identifier
ezP.T3.Expr.classname = ezP.T3.Expr.identifier
ezP.T3.Expr.dotting_identifier = ezP.T3.Expr.identifier

// special aliases, some types that change naming across the documentation
ezP.T3.Expr.or_expr_star = ezP.T3.Expr.star_expr

ezP.T3.Expr.Check = {
  atom: [ // count 15
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  enclosure: [ // count 6
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
  ],
  literal: [ // count 7
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
  ],
  key_datum_list: [ // count 2
    ezP.T3.Expr.key_datum_concrete,
    ezP.T3.Expr.or_expr_star_star,
  ],
  yield_expression: [ // count 2
    ezP.T3.Expr.yield_expression_list,
    ezP.T3.Expr.yield_from_expression,
  ],
  primary: [ // count 19
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  slice_list: [ // count 36
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.proper_slice,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  power: [ // count 21
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  u_expr: [ // count 22
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  m_expr: [ // count 23
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  a_expr: [ // count 24
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  shift_expr: [ // count 25
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  and_expr: [ // count 26
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  xor_expr: [ // count 27
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  or_expr: [ // count 28
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  comparison: [ // count 30
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  or_test: [ // count 33
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  and_test: [ // count 32
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  not_test: [ // count 31
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  conditional_expression: [ // count 34
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  expression: [ // count 35
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  expression_nocond: [ // count 34
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.lambda_expr_nocond,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  non_void_starred_item_list: [ // count 1
    ezP.T3.Expr.non_void_starred_item_list,
  ],
  starred_item_list: [ // count 1
    ezP.T3.Expr.starred_item_list,
  ],
  not_a_variable: [ // count 2
    ezP.T3.Expr.module_identifier,
    ezP.T3.Expr.attribute_identifier,
  ],
  non_void_starred_item_list: [ // count 36
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.star_expr,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  shortliteral: [ // count 2
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
  ],
  longliteral: [ // count 2
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
  ],
  bytesliteral: [ // count 2
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longbytesliteral,
  ],
  stringliteral: [ // count 2
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longbytesliteral,
  ],
  numberliteral: [ // count 3
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
  ],
  comp_iter_list: [ // count 2
    ezP.T3.Expr.comp_for,
    ezP.T3.Expr.comp_if,
  ],
  starred_item_list_comprehensive: [ // count 37
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.comprehension,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.star_expr,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  non_void_starred_item_list_comprehensive: [ // count 37
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.comprehension,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.star_expr,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  key_datum_list_comprehensive: [ // count 3
    ezP.T3.Expr.dict_comprehension,
    ezP.T3.Expr.key_datum_concrete,
    ezP.T3.Expr.or_expr_star_star,
  ],
  argument_any: [ // count 38
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.keyword_item,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.expression_star,
    ezP.T3.Expr.expression_star_star,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  argument_list_comprehensive: [ // count 2
    ezP.T3.Expr.comprehension,
    ezP.T3.Expr.argument_list,
  ],
  await_or_primary: [ // count 20
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.identifier,
  ],
  algebra_choice: [ // count 2
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
  ],
  bitwise_choice: [ // count 4
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
  ],
  boolean_choice: [ // count 2
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
  ],
  unary_choice: [ // count 2
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.not_test_concrete,
  ],
  target_list: [ // count 7
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.parenth_target_list,
    ezP.T3.Expr.bracket_target_list,
    ezP.T3.Expr.target_star,
    ezP.T3.Expr.identifier,
  ],
  augtarget: [ // count 4
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.identifier,
  ],
  module: [ // count 2
    ezP.T3.Expr.module_concrete,
    ezP.T3.Expr.identifier,
  ],
  relative_module: [ // count 3
    ezP.T3.Expr.module_concrete,
    ezP.T3.Expr.parent_module,
    ezP.T3.Expr.identifier,
  ],
  assigned_list: [ // count 39
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.star_expr,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.yield_expression_list,
    ezP.T3.Expr.yield_from_expression,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.assignment_expression,
    ezP.T3.Expr.identifier,
  ],
  assigned_single: [ // count 3
    ezP.T3.Expr.yield_expression_list,
    ezP.T3.Expr.yield_from_expression,
    ezP.T3.Expr.assignment_expression,
  ],
  augassign_list: [ // count 38
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.yield_expression_list,
    ezP.T3.Expr.yield_from_expression,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.augassign_list_concrete,
    ezP.T3.Expr.identifier,
  ],
  augassign_single: [ // count 37
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.yield_expression_list,
    ezP.T3.Expr.yield_from_expression,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
  ],
  target_unstar: [ // count 6
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.parenth_target_list,
    ezP.T3.Expr.bracket_target_list,
    ezP.T3.Expr.identifier,
  ],
  import_expr: [ // count 3
    ezP.T3.Expr.import_module,
    ezP.T3.Expr.from_relative_module_import,
    ezP.T3.Expr.from_module_import,
  ],
  non_void_module_as_list: [ // count 3
    ezP.T3.Expr.module_concrete,
    ezP.T3.Expr.module_as_concrete,
    ezP.T3.Expr.identifier,
  ],
  module_alias: [ // count 1
    ezP.T3.Expr.identifier,
  ],
  non_void_import_identifier_as_list: [ // count 2
    ezP.T3.Expr.import_identifier_as_concrete,
    ezP.T3.Expr.identifier,
  ],
  import_identifier: [ // count 1
    ezP.T3.Expr.identifier,
  ],
  import_alias: [ // count 1
    ezP.T3.Expr.identifier,
  ],
  non_void_identifier_list: [ // count 1
    ezP.T3.Expr.identifier,
  ],
  raise_expression: [ // count 36
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.expression_from,
  ],
  decorator: [ // count 2
    ezP.T3.Expr.decorator_expr,
    ezP.T3.Expr.decorator_call_expr,
  ],
  dotted_name: [ // count 1
    ezP.T3.Expr.identifier,
  ],
  parameter: [ // count 2
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
  ],
  defparameter: [ // count 3
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
    ezP.T3.Expr.defparameter_concrete,
  ],
  expression_except: [ // count 36
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.expression_as_name,
  ],
  with_item_list: [ // count 36
    ezP.T3.Expr.parenth_form,
    ezP.T3.Expr.list_display,
    ezP.T3.Expr.set_display,
    ezP.T3.Expr.dict_display,
    ezP.T3.Expr.generator_expression,
    ezP.T3.Expr.yield_atom,
    ezP.T3.Expr.attributeref,
    ezP.T3.Expr.subscription,
    ezP.T3.Expr.slicing,
    ezP.T3.Expr.call_expr,
    ezP.T3.Expr.await_expr,
    ezP.T3.Expr.power_concrete,
    ezP.T3.Expr.u_expr_concrete,
    ezP.T3.Expr.m_expr_concrete,
    ezP.T3.Expr.a_expr_concrete,
    ezP.T3.Expr.shift_expr_concrete,
    ezP.T3.Expr.and_expr_concrete,
    ezP.T3.Expr.xor_expr_concrete,
    ezP.T3.Expr.or_expr_concrete,
    ezP.T3.Expr.or_test_concrete,
    ezP.T3.Expr.and_test_concrete,
    ezP.T3.Expr.not_test_concrete,
    ezP.T3.Expr.conditional_expression_concrete,
    ezP.T3.Expr.lambda_expr,
    ezP.T3.Expr.builtin_object,
    ezP.T3.Expr.shortstringliteral,
    ezP.T3.Expr.shortbytesliteral,
    ezP.T3.Expr.longstringliteral,
    ezP.T3.Expr.longbytesliteral,
    ezP.T3.Expr.integer,
    ezP.T3.Expr.floatnumber,
    ezP.T3.Expr.imagnumber,
    ezP.T3.Expr.number_comparison,
    ezP.T3.Expr.object_comparison,
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.with_item_concrete,
  ],
  funcdef_expr: [ // count 2
    ezP.T3.Expr.funcdef_simple,
    ezP.T3.Expr.funcdef_typed,
  ],
  dotted_funcname: [ // count 2
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.dotted_funcname_concrete,
  ],
  parameter_any: [ // count 5
    ezP.T3.Expr.identifier,
    ezP.T3.Expr.parameter_concrete,
    ezP.T3.Expr.defparameter_concrete,
    ezP.T3.Expr.parameter_star,
    ezP.T3.Expr.parameter_star_star,
  ],
  classdef_expr: [ // count 2
    ezP.T3.Expr.classdef_simple,
    ezP.T3.Expr.classdef_derived,
  ],
}

// same checks
ezP.T3.Expr.Check.comp_iter = ezP.T3.Expr.Check.comp_iter_list
ezP.T3.Expr.Check.key_datum = ezP.T3.Expr.Check.key_datum_list
ezP.T3.Expr.Check.slice_item = ezP.T3.Expr.Check.slice_list
ezP.T3.Expr.Check.starred_item = ezP.T3.Expr.Check.non_void_starred_item_list
ezP.T3.Expr.Check.target = ezP.T3.Expr.Check.target_list
ezP.T3.Expr.Check.module_as = ezP.T3.Expr.Check.non_void_module_as_list
ezP.T3.Expr.Check.import_identifier_as = ezP.T3.Expr.Check.non_void_import_identifier_as_list
ezP.T3.Expr.Check.with_item = ezP.T3.Expr.Check.with_item_list

// alias checks
ezP.T3.Expr.Check.lower_bound = ezP.T3.Expr.Check.expression
ezP.T3.Expr.Check.upper_bound = ezP.T3.Expr.Check.expression
ezP.T3.Expr.Check.stride = ezP.T3.Expr.Check.expression
ezP.T3.Expr.Check.expression_list = ezP.T3.Expr.Check.non_void_expression_list
ezP.T3.Expr.Check.feature = ezP.T3.Expr.Check.identifier
ezP.T3.Expr.Check.module_name = ezP.T3.Expr.Check.identifier
ezP.T3.Expr.Check.funcname = ezP.T3.Expr.Check.identifier
ezP.T3.Expr.Check.classname = ezP.T3.Expr.Check.identifier
ezP.T3.Expr.Check.dotting_identifier = ezP.T3.Expr.Check.identifier

ezP.T3.Expr.Available = []

ezP.T3.Xml = {}

ezP.T3.Xml.Stmt = { // count 0
}

ezP.T3.Xml.Expr = { // count 0
}
