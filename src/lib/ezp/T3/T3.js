// This file was generated by "python types.py" on 2018-01-24 23:25:01.920314

/**
 * ezPython
 *
 * Copyright 2017 Jérôme LAURENS.
 *
 * License CeCILL-B
 */
/**
 * @fileoverview Constants for ezPython.
 * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
 */
'use strict'

/**
 * @name ezP.T3
 * @namespace
 **/

goog.provide('ezP.T3')

goog.require('ezP')

ezP.T3 = {
  compound_stmt             /*   ::=                                                    */ : "compound_stmt",
  imagnumber                /*   ::=                                                    */ : "imagnumber",
  floatnumber               /*   ::=                                                    */ : "floatnumber",
  integer                   /*   ::=                                                    */ : "integer",
  bytesliteral              /*   ::=                                                    */ : "bytesliteral",
  stringliteral             /*   ::=                                                    */ : "stringliteral",
  starred_target            /*   ::=                                                    */ : "starred_target",
  simple_stmt               /*   ::=                                                    */ : "simple_stmt",
  identifier                /*   ::=                                                    */ : "identifier",
  atom                      /*   ::= identifier | literal | enclosure                   */ : "atom",
  enclosure                 /*   ::= parenth_form | list_display | dict_display | set_display | generator_expression | yield_atom */ : "enclosure",
  literal                   /*   ::= stringliteral | bytesliteral | integer | floatnumber | imagnumber */ : "literal",
  parenth_form              /*   ::= "(" [starred_expression] ")"                       */ : "parenth_form",
  comprehension             /*   ::= expression comp_for                                */ : "comprehension",
  comp_for                  /*   ::= [ASYNC] "for" target_list "in" or_test [comp_iter] */ : "comp_for",
  comp_iter                 /*   ::= comp_for | comp_if                                 */ : "comp_iter",
  comp_if                   /*   ::= "if" expression_nocond [comp_iter]                 */ : "comp_if",
  list_display              /*   ::= "[" [starred_list | comprehension] "]"             */ : "list_display",
  set_display               /*   ::= "{" (starred_list | comprehension) "}"             */ : "set_display",
  dict_display              /*   ::= "{" [key_datum_list | dict_comprehension] "}"      */ : "dict_display",
  key_datum_list            /*   ::= key_datum ("," key_datum)* [","]                   */ : "key_datum_list",
  key_datum                 /*   ::= key_datum_concrete | or_expr_double_starred        */ : "key_datum",
  dict_comprehension        /*   ::= expression ":" expression comp_for                 */ : "dict_comprehension",
  generator_expression      /*   ::= "(" expression comp_for ")"                        */ : "generator_expression",
  yield_atom                /*   ::= "(" yield_expression ")"                           */ : "yield_atom",
  yield_expression          /*   ::= "yield" expression_or_from_list                    */ : "yield_expression",
  primary                   /*   ::= atom | attributeref | subscription | slicing | call */ : "primary",
  attributeref              /*   ::= primary "." identifier                             */ : "attributeref",
  subscription              /*   ::= primary "[" expression_list "]"                    */ : "subscription",
  slicing                   /*   ::= primary display_slice_list                         */ : "slicing",
  slice_list                /*   ::= slice_item ("," slice_item)* [","]                 */ : "slice_list",
  slice_item                /*   ::= expression | proper_slice                          */ : "slice_item",
  proper_slice              /*   ::= [lower_bound] ":" [upper_bound] [ ":" [stride] ]   */ : "proper_slice",
  lower_bound               /*   ::= expression                                         */ : "lower_bound",
  upper_bound               /*   ::= expression                                         */ : "upper_bound",
  stride                    /*   ::= expression                                         */ : "stride",
  call                      /*   ::= primary "(" [argument_list [","] | comprehension] ")" */ : "call",
  argument_list             /*   ::= positional_arguments ["," starred_and_keywords] ["," keywords_arguments] | starred_and_keywords ["," keywords_arguments] | keywords_arguments */ : "argument_list",
  positional_arguments      /*   ::= positional_argument ("," positional_argument)*     */ : "positional_arguments",
  starred_and_keywords      /*   ::= starred_and_keyword ("," starred_and_keyword)*     */ : "starred_and_keywords",
  keywords_arguments        /*   ::= keywords_argument ("," keywords_argument)*         */ : "keywords_arguments",
  keyword_item              /*   ::= identifier "=" expression                          */ : "keyword_item",
  await_expr                /*   ::= "await" primary                                    */ : "await_expr",
  power                     /*   ::= await_or_primary | power_concrete                  */ : "power",
  u_expr                    /*   ::= power | u_expr_concrete                            */ : "u_expr",
  u_expr_concrete           /*   ::= "-" u_expr | "+" u_expr | "~" u_expr               */ : "u_expr_concrete",
  m_expr                    /*   ::= u_expr | m_expr_concrete                           */ : "m_expr",
  m_expr_concrete           /*   ::= m_expr "*" u_expr | m_expr "@" m_expr | m_expr "//" u_expr| m_expr "/" u_expr | m_expr "%" u_expr */ : "m_expr_concrete",
  a_expr                    /*   ::= m_expr | a_expr_concrete                           */ : "a_expr",
  a_expr_concrete           /*   ::= a_expr "+" m_expr | a_expr "-" m_expr              */ : "a_expr_concrete",
  shift_expr                /*   ::= a_expr | shift_expr_concrete                       */ : "shift_expr",
  shift_expr_concrete       /*   ::= shift_expr ( "<<" | ">>" ) a_expr                  */ : "shift_expr_concrete",
  and_expr                  /*   ::= shift_expr | and_expr_concrete                     */ : "and_expr",
  and_expr_concrete         /*   ::= and_expr "&" shift_expr                            */ : "and_expr_concrete",
  xor_expr                  /*   ::= and_expr | xor_expr_concrete                       */ : "xor_expr",
  xor_expr_concrete         /*   ::= xor_expr "^" and_expr                              */ : "xor_expr_concrete",
  or_expr                   /*   ::= xor_expr | or_expr_concrete                        */ : "or_expr",
  or_expr_concrete          /*   ::= or_expr "|" xor_expr                               */ : "or_expr_concrete",
  comparison                /*   ::= or_expr | comparison_concrete                      */ : "comparison",
  comp_operator             /*   ::= "<" | ">" | "==" | ">=" | "<=" | "!=" | "is" ["not"] | ["not"] "in" */ : "comp_operator",
  or_test                   /*   ::= and_test | or_test_concrete                        */ : "or_test",
  or_test_concrete          /*   ::= or_test "or" and_test                              */ : "or_test_concrete",
  and_test                  /*   ::= not_test | and_test_concrete                       */ : "and_test",
  and_test_concrete         /*   ::= and_test "and" not_test                            */ : "and_test_concrete",
  not_test                  /*   ::= comparison | not_test_concrete                     */ : "not_test",
  not_test_concrete         /*   ::= "not" not_test                                     */ : "not_test_concrete",
  conditional_expression    /*   ::= or_test | conditional_expression_concrete          */ : "conditional_expression",
  expression                /*   ::= conditional_expression | lambda_expr               */ : "expression",
  expression_nocond         /*   ::= or_test | lambda_expr_nocond                       */ : "expression_nocond",
  lambda_expr               /*   ::= "lambda" [parameter_list]: expression              */ : "lambda_expr",
  lambda_expr_nocond        /*   ::= "lambda" [parameter_list]: expression_nocond       */ : "lambda_expr_nocond",
  expression_list           /*   ::= expression ( "," expression )* [","]               */ : "expression_list",
  starred_list              /*   ::= starred_item ( "," starred_item )* [","]           */ : "starred_list",
  starred_expression        /*   ::= starred_item_list                                  */ : "starred_expression",
  starred_expression_concrete /*   ::= ( starred_item "," )* [starred_item]               */ : "starred_expression_concrete",
  starred_item              /*   ::= expression | or_expr_starred                       */ : "starred_item",
  starred_or_expr           /*   ::= "*" or_expr                                        */ : "starred_or_expr",
  starred_item_list         /*   ::= starred_item | starred_item_list_concrete          */ : "starred_item_list",
  starred_item_list_concrete /*   ::= (starred_item,)+ [starred_item]                    */ : "starred_item_list_concrete",
  or_expr_starred           /*   ::= "*" or_expr                                        */ : "or_expr_starred",
  comp_iter_list            /*   ::= (comp_iter) *                                      */ : "comp_iter_list",
  starred_list_comprehensive /*   ::= starred_item | comprehension                       */ : "starred_list_comprehensive",
  non_void_starred_list_comprehensive /*   ::= starred_item | comprehension                       */ : "non_void_starred_list_comprehensive",
  key_datum_list_comprehensive /*   ::= key_datum | dict_comprehension                     */ : "key_datum_list_comprehensive",
  key_datum_concrete        /*   ::= expression ":" expression                          */ : "key_datum_concrete",
  or_expr_double_starred    /*   ::= "**" or_expr                                       */ : "or_expr_double_starred",
  expression_or_from_list   /*   ::= expression | yield_from                            */ : "expression_or_from_list",
  yield_from                /*   ::= "from" expression                                  */ : "yield_from",
  dot_identifier            /*   ::= "." identifier                                     */ : "dot_identifier",
  display_slice_list        /*   ::= "[" slice_list "]"                                 */ : "display_slice_list",
  argument_list_comprehensive /*   ::= argument_list | comprehension                      */ : "argument_list_comprehensive",
  positional_argument       /*   ::= expression | expression_starred                    */ : "positional_argument",
  expression_starred        /*   ::= "*" expression                                     */ : "expression_starred",
  starred_and_keyword       /*   ::= expression_starred | keyword_item                  */ : "starred_and_keyword",
  keywords_argument         /*   ::= keyword_item | expression_double_starred           */ : "keywords_argument",
  expression_double_starred /*   ::= "**" expression                                    */ : "expression_double_starred",
  any_argument_but_double_starred /*   ::= expression | expression_starred | keyword_item     */ : "any_argument_but_double_starred",
  any_argument_but_expression /*   ::= expression_starred | keyword_item | expression_double_starred */ : "any_argument_but_expression",
  any_argument              /*   ::= expression | expression_starred | keyword_item | expression_double_starred */ : "any_argument",
  any_argument_comprehensive /*   ::= any_argument | comprehension                       */ : "any_argument_comprehensive",
  power_concrete            /*   ::= await_or_primary "**" u_expr                       */ : "power_concrete",
  await_or_primary          /*   ::= await_expr | primary                               */ : "await_or_primary",
  comparison_concrete       /*   ::= comparison comp_operator comparison                */ : "comparison_concrete",
  conditional_expression_concrete /*   ::= or_test "if" or_test "else" expression             */ : "conditional_expression_concrete",
  algebra_concrete          /*   ::= m_expr_concrete | a_expr_concrete                  */ : "algebra_concrete",
  bitwise_concrete          /*   ::= shift_expr_concrete | and_expr_concrete | xor_expr_concrete | or_expr_concrete */ : "bitwise_concrete",
  boolean_concrete          /*   ::= and_test_concrete | or_test_concrete               */ : "boolean_concrete",
  unary_concrete            /*   ::= u_expr_concrete | not_test_concrete                */ : "unary_concrete",
  target_list               /*   ::= target ("," target)* [","]                         */ : "target_list",
  target                    /*   ::= identifier | parenth_target_list | bracket_target_list | attributeref | subscription | slicing | starred_target */ : "target",
  augtarget                 /*   ::= identifier | attributeref | subscription | slicing */ : "augtarget",
  augop                     /*   ::= "+=" | "-=" | "*=" | "@=" | "/=" | "//=" | "%=" | "**=" | ">>=" | "<<=" | "&=" | "^=" | "|=" */ : "augop",
  module                    /*   ::= (identifier ".")* identifier                       */ : "module",
  relative_module           /*   ::= "."* module | "."+                                 */ : "relative_module",
  feature                   /*   ::= identifier                                         */ : "feature",
  assignment_expression     /*   ::= target_list "=" assigned_expression                */ : "assignment_expression",
  assigned_expression       /*   ::= starred_expression | yield_expression | assignment_expression */ : "assigned_expression",
  augmented_assignment_expression /*   ::= augtarget augop aug_assigned                       */ : "augmented_assignment_expression",
  aug_assigned              /*   ::= expression_list | yield_expression                 */ : "aug_assigned",
  bracket_target_list       /*   ::= "[" void_target_list "]"                           */ : "bracket_target_list",
  parenth_target_list       /*   ::= "(" void_target_list ")"                           */ : "parenth_target_list",
  target_starred            /*   ::= "*" target                                         */ : "target_starred",
  something_starred         /*   ::= "*" something                                      */ : "something_starred",
  suite                     /*   ::= stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT */ : "suite",
  statement                 /*   ::= stmt_list NEWLINE | compound_stmt                  */ : "statement",
  stmt_list                 /*   ::= simple_stmt (";" simple_stmt)* [";"]               */ : "stmt_list",
  with_item                 /*   ::= expression ["as" target]                           */ : "with_item",
  funcdef                   /*   ::= [decorators] "def" funcname "(" [parameter_list] ")" ["->" expression] ":" suite */ : "funcdef",
  decorators                /*   ::= decorator+                                         */ : "decorators",
  decorator                 /*   ::= "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE */ : "decorator",
  dotted_name               /*   ::= identifier ("." identifier)*                       */ : "dotted_name",
  parameter_list            /*   ::= defparameter ("," defparameter)* ["," [parameter_list_starargs]] | parameter_list_starargs */ : "parameter_list",
  parameter_list_starargs   /*   ::= "*" [parameter] ("," defparameter)* ["," ["**" parameter [","]]] | "**" parameter [","] */ : "parameter_list_starargs",
  parameter                 /*   ::= identifier | parameter_annotated                   */ : "parameter",
  defparameter              /*   ::= parameter | parameter_default                      */ : "defparameter",
  funcname                  /*   ::= identifier                                         */ : "funcname",
  classdef                  /*   ::= [decorators] "class" classname [inheritance] ":" suite */ : "classdef",
  inheritance               /*   ::= "(" [argument_list] ")"                            */ : "inheritance",
  classname                 /*   ::= identifier                                         */ : "classname",
  async_funcdef             /*   ::= [decorators] "async" "def" funcname "(" [parameter_list] ")" ["->" expression] ":" suite */ : "async_funcdef",
  parameter_annotated       /*   ::= identifier ":" expression                          */ : "parameter_annotated",
  parameter_default         /*   ::= parameter "=" expression                           */ : "parameter_default",
  parameter_starred         /*   ::= "*" [parameter]                                    */ : "parameter_starred",
  parameter_double_starred  /*   ::= "**" parameter                                     */ : "parameter_double_starred",
  parameter_any             /*   ::= parameter | parameter_default | parameter_starred | parameter_double_starred */ : "parameter_any",
  parameter_no_single_starred /*   ::= parameter | parameter_default | parameter_double_starred */ : "parameter_no_single_starred",
  parameter_no_double_starred /*   ::= parameter | parameter_default | parameter_starred  */ : "parameter_no_double_starred",
  parameter_no_starred      /*   ::= parameter | parameter_default                      */ : "parameter_no_starred",
}

ezP.T3.Require = {
  atom: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
  ],
  enclosure: [
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
  ],
  literal: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
  ],
  comp_iter: [
    ezP.T3.comp_for,
    ezP.T3.comp_if,
  ],
  key_datum_list: [
    ezP.T3.key_datum_concrete,
    ezP.T3.or_expr_double_starred,
  ],
  key_datum: [
    ezP.T3.key_datum_concrete,
    ezP.T3.or_expr_double_starred,
  ],
  primary: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
  ],
  slice_list: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.proper_slice,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  slice_item: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.proper_slice,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  lower_bound: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  upper_bound: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  stride: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  argument_list: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.positional_arguments,
    ezP.T3.starred_and_keywords,
    ezP.T3.keywords_arguments,
    ezP.T3.keyword_item,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.expression_starred,
    ezP.T3.expression_double_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  positional_arguments: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.expression_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  starred_and_keywords: [
    ezP.T3.keyword_item,
    ezP.T3.expression_starred,
  ],
  keywords_arguments: [
    ezP.T3.keyword_item,
    ezP.T3.expression_double_starred,
  ],
  power: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.power_concrete,
  ],
  u_expr: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.power_concrete,
  ],
  m_expr: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.power_concrete,
  ],
  a_expr: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.power_concrete,
  ],
  shift_expr: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.power_concrete,
  ],
  and_expr: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.power_concrete,
  ],
  xor_expr: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.power_concrete,
  ],
  or_expr: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.power_concrete,
  ],
  comparison: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
  ],
  or_test: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
  ],
  and_test: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
  ],
  not_test: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
  ],
  conditional_expression: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  expression: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  expression_nocond: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr_nocond,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
  ],
  expression_list: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  starred_list: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.or_expr_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  starred_expression: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.starred_item_list_concrete,
    ezP.T3.or_expr_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  starred_item: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.or_expr_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  starred_item_list: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.starred_item_list_concrete,
    ezP.T3.or_expr_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  starred_list_comprehensive: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.comprehension,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.or_expr_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  non_void_starred_list_comprehensive: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.comprehension,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.or_expr_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  key_datum_list_comprehensive: [
    ezP.T3.dict_comprehension,
    ezP.T3.key_datum_concrete,
    ezP.T3.or_expr_double_starred,
  ],
  expression_or_from_list: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.yield_from,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  argument_list_comprehensive: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.comprehension,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.starred_and_keywords,
    ezP.T3.keywords_arguments,
    ezP.T3.keyword_item,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.expression_starred,
    ezP.T3.expression_double_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  positional_argument: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.expression_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  starred_and_keyword: [
    ezP.T3.keyword_item,
    ezP.T3.expression_starred,
  ],
  keywords_argument: [
    ezP.T3.keyword_item,
    ezP.T3.expression_double_starred,
  ],
  any_argument_but_double_starred: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.keyword_item,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.expression_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  any_argument_but_expression: [
    ezP.T3.keyword_item,
    ezP.T3.expression_starred,
    ezP.T3.expression_double_starred,
  ],
  any_argument: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.keyword_item,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.expression_starred,
    ezP.T3.expression_double_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  any_argument_comprehensive: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.comprehension,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.keyword_item,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.expression_starred,
    ezP.T3.expression_double_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  await_or_primary: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
  ],
  algebra_concrete: [
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
  ],
  bitwise_concrete: [
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
  ],
  boolean_concrete: [
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
  ],
  unary_concrete: [
    ezP.T3.u_expr_concrete,
    ezP.T3.not_test_concrete,
  ],
  target_list: [
    ezP.T3.starred_target,
    ezP.T3.identifier,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.bracket_target_list,
    ezP.T3.parenth_target_list,
  ],
  target: [
    ezP.T3.starred_target,
    ezP.T3.identifier,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.bracket_target_list,
    ezP.T3.parenth_target_list,
  ],
  augtarget: [
    ezP.T3.identifier,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
  ],
  module: [
    ezP.T3.identifier,
  ],
  feature: [
    ezP.T3.identifier,
  ],
  assigned_expression: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.yield_expression,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.starred_item_list_concrete,
    ezP.T3.or_expr_starred,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
    ezP.T3.assignment_expression,
  ],
  aug_assigned: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.yield_expression,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.expression_list,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  statement: [
    ezP.T3.compound_stmt,
  ],
  stmt_list: [
    ezP.T3.simple_stmt,
  ],
  with_item: [
    ezP.T3.imagnumber,
    ezP.T3.floatnumber,
    ezP.T3.integer,
    ezP.T3.bytesliteral,
    ezP.T3.stringliteral,
    ezP.T3.identifier,
    ezP.T3.parenth_form,
    ezP.T3.list_display,
    ezP.T3.set_display,
    ezP.T3.dict_display,
    ezP.T3.generator_expression,
    ezP.T3.yield_atom,
    ezP.T3.attributeref,
    ezP.T3.subscription,
    ezP.T3.slicing,
    ezP.T3.call,
    ezP.T3.await_expr,
    ezP.T3.u_expr_concrete,
    ezP.T3.m_expr_concrete,
    ezP.T3.a_expr_concrete,
    ezP.T3.shift_expr_concrete,
    ezP.T3.and_expr_concrete,
    ezP.T3.xor_expr_concrete,
    ezP.T3.or_expr_concrete,
    ezP.T3.or_test_concrete,
    ezP.T3.and_test_concrete,
    ezP.T3.not_test_concrete,
    ezP.T3.lambda_expr,
    ezP.T3.power_concrete,
    ezP.T3.comparison_concrete,
    ezP.T3.conditional_expression_concrete,
  ],
  dotted_name: [
    ezP.T3.identifier,
  ],
  parameter_list: [
    ezP.T3.parameter_list_starargs,
  ],
  parameter: [
    ezP.T3.identifier,
    ezP.T3.parameter_annotated,
  ],
  defparameter: [
    ezP.T3.identifier,
    ezP.T3.parameter_annotated,
    ezP.T3.parameter_default,
  ],
  funcname: [
    ezP.T3.identifier,
  ],
  classname: [
    ezP.T3.identifier,
  ],
  parameter_any: [
    ezP.T3.identifier,
    ezP.T3.parameter_annotated,
    ezP.T3.parameter_default,
    ezP.T3.parameter_starred,
    ezP.T3.parameter_double_starred,
  ],
  parameter_no_single_starred: [
    ezP.T3.identifier,
    ezP.T3.parameter_annotated,
    ezP.T3.parameter_default,
    ezP.T3.parameter_double_starred,
  ],
  parameter_no_double_starred: [
    ezP.T3.identifier,
    ezP.T3.parameter_annotated,
    ezP.T3.parameter_default,
    ezP.T3.parameter_starred,
  ],
  parameter_no_starred: [
    ezP.T3.identifier,
    ezP.T3.parameter_annotated,
    ezP.T3.parameter_default,
  ],
}

ezP.T3.Provide = {
  compound_stmt: [
    ezP.T3.statement,
  ],
  imagnumber: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  floatnumber: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  integer: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  bytesliteral: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  stringliteral: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  starred_target: [
    ezP.T3.target_list,
  ],
  simple_stmt: [
    ezP.T3.stmt_list,
  ],
  identifier: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.target_list,
    ezP.T3.module,
    ezP.T3.with_item,
    ezP.T3.dotted_name,
  ],
  atom: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  enclosure: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  literal: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  parenth_form: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  list_display: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  set_display: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  dict_display: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  key_datum: [
    ezP.T3.key_datum_list,
  ],
  generator_expression: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  yield_atom: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  primary: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  attributeref: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.target_list,
    ezP.T3.with_item,
  ],
  subscription: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.target_list,
    ezP.T3.with_item,
  ],
  slicing: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.target_list,
    ezP.T3.with_item,
  ],
  slice_item: [
    ezP.T3.slice_list,
  ],
  proper_slice: [
    ezP.T3.slice_list,
  ],
  call: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  positional_arguments: [
    ezP.T3.argument_list,
  ],
  starred_and_keywords: [
    ezP.T3.argument_list,
  ],
  keywords_arguments: [
    ezP.T3.argument_list,
  ],
  keyword_item: [
    ezP.T3.argument_list,
    ezP.T3.starred_and_keywords,
    ezP.T3.keywords_arguments,
  ],
  await_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  power: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  u_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  u_expr_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  m_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  m_expr_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  a_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  a_expr_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  shift_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  shift_expr_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  and_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  and_expr_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  xor_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  xor_expr_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  or_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  or_expr_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  comparison: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  or_test: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  or_test_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  and_test: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  and_test_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  not_test: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  not_test_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  conditional_expression: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  expression: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  lambda_expr: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  starred_item: [
    ezP.T3.starred_list,
  ],
  or_expr_starred: [
    ezP.T3.starred_list,
  ],
  key_datum_concrete: [
    ezP.T3.key_datum_list,
  ],
  or_expr_double_starred: [
    ezP.T3.key_datum_list,
  ],
  positional_argument: [
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
  ],
  expression_starred: [
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.starred_and_keywords,
  ],
  starred_and_keyword: [
    ezP.T3.argument_list,
    ezP.T3.starred_and_keywords,
  ],
  keywords_argument: [
    ezP.T3.argument_list,
    ezP.T3.keywords_arguments,
  ],
  expression_double_starred: [
    ezP.T3.argument_list,
    ezP.T3.keywords_arguments,
  ],
  power_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  await_or_primary: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  comparison_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  conditional_expression_concrete: [
    ezP.T3.slice_list,
    ezP.T3.argument_list,
    ezP.T3.positional_arguments,
    ezP.T3.expression_list,
    ezP.T3.starred_list,
    ezP.T3.with_item,
  ],
  target: [
    ezP.T3.target_list,
  ],
  bracket_target_list: [
    ezP.T3.target_list,
  ],
  parenth_target_list: [
    ezP.T3.target_list,
  ],
  parameter_list_starargs: [
    ezP.T3.parameter_list,
  ],
}
